#if defined RANET && defined RA_PLUS
// disable interrupts to avoid conflict with SoftwareSerial
#else
SIGNAL(PCINT0_vect)
{
	if (millis()-ButtonDebounce>600)
	{
		ButtonDebounce=millis();
		ButtonPress++;
	}
}
#endif // RANET

// Menu Headings
const prog_char Menu_0_label[] PROGMEM = "Main:";
#if !defined SIMPLE_MENU && !defined CUSTOM_MENU
const prog_char Menu_1_label[] PROGMEM = "Setup:";
#ifndef RemoveAllLights
const prog_char Menu_2_label[] PROGMEM = "Lights:";
#endif  // RemoveAllLights
const prog_char Menu_3_label[] PROGMEM = "Temp:";
#if defined SetupExtras || defined ATOSetup
const prog_char Menu_4_label[] PROGMEM = "Timeouts:";
#endif  // defined SetupExtras || defined ATOSetup
#endif  // !defined SIMPLE_MENU && !defined CUSTOM_MENU
PROGMEM const char * const menulabel_items[] = {
		Menu_0_label,
#if !defined SIMPLE_MENU && !defined CUSTOM_MENU
		Menu_1_label,
#ifndef RemoveAllLights
		Menu_2_label,
#endif  // RemoveAllLights
		Menu_3_label,
#if defined SetupExtras || defined ATOSetup
		Menu_4_label,
#endif  // defined SetupExtras || defined ATOSetup
#endif  // !defined SIMPLE_MENU && !defined CUSTOM_MENU
};

// Return menu entries
const prog_char Return_0_label[] PROGMEM = "<- Prev Menu";
const prog_char Return_1_label[] PROGMEM = "Exit";
//const prog_char Return_2_label[] PROGMEM = "Press to exit...";
PROGMEM const char * const return_items[] = { Return_0_label, Return_1_label/*, Return_2_label*/ };

// NOTE for nested menus
// NOTE Menu labels can be a max of 20 characters
// Associate a menu name to a numeric value
// the total number must match the max number of menus

enum Menus {
	MainMenu,
#if !defined SIMPLE_MENU && !defined CUSTOM_MENU
	SetupMenu,
#ifndef RemoveAllLights
	LightsMenu,
#endif  // RemoveAllLights
	TempsMenu,
#if defined SetupExtras || defined ATOSetup
	TimeoutsMenu,
#endif  // if defined SetupExtras || defined ATOSetup
	//	PreviousMenu,
#endif  // !defined SIMPLE_MENU && !defined CUSTOM_MENU
	//	ExitMenu,
};

#ifdef CUSTOM_MENU
enum CustomMenuItem {
	CustomMenu_1,
#if CUSTOM_MENU_ENTRIES >= 2
	CustomMenu_2,
#endif  // CUSTOM_MENU_ENTRIES >= 2
#if CUSTOM_MENU_ENTRIES >= 3
	CustomMenu_3,
#endif  // CUSTOM_MENU_ENTRIES >= 3
#if CUSTOM_MENU_ENTRIES >= 4
	CustomMenu_4,
#endif  // CUSTOM_MENU_ENTRIES >= 4
#if CUSTOM_MENU_ENTRIES >= 5
	CustomMenu_5,
#endif  // CUSTOM_MENU_ENTRIES >= 5
#if CUSTOM_MENU_ENTRIES >= 6
	CustomMenu_6,
#endif  // CUSTOM_MENU_ENTRIES >= 6
#if CUSTOM_MENU_ENTRIES >= 7
	CustomMenu_7,
#endif  // CUSTOM_MENU_ENTRIES >= 7
#if CUSTOM_MENU_ENTRIES >= 8
	CustomMenu_8,
#endif  // CUSTOM_MENU_ENTRIES >= 8
#if CUSTOM_MENU_ENTRIES >= 9
	CustomMenu_9,
#endif  // CUSTOM_MENU_ENTRIES >= 9
};
#else  // CUSTOM_MENU
#ifdef SIMPLE_MENU
// This is the simplified menu
// Main Menu
const prog_char mainmenu_0_label[] PROGMEM = "Feeding";
const prog_char mainmenu_1_label[] PROGMEM = "Water Change";
const prog_char mainmenu_2_label[] PROGMEM = "ATO Clear";
const prog_char mainmenu_3_label[] PROGMEM = "Overheat Clear";
#ifdef LEAKDETECTOREXPANSION
const prog_char mainmenu_11_label[] PROGMEM = "Leak Clear";
#endif  // LEAKDETECTOREXPANSION
const prog_char mainmenu_4_label[] PROGMEM = "PH Calibration";
#ifdef SALINITYEXPANSION
const prog_char mainmenu_5_label[] PROGMEM = "Sal Calibration";
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
const prog_char mainmenu_6_label[] PROGMEM = "ORP Calibration";
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
const prog_char mainmenu_7_label[] PROGMEM = "PH Exp Calibration";
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
const prog_char mainmenu_8_label[] PROGMEM = "Water Calibration";
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef DateTimeSetup
const prog_char mainmenu_9_label[] PROGMEM = "Date / Time";
#endif  // DateTimeSetup
#ifdef VersionMenu
const prog_char mainmenu_10_label[] PROGMEM = "Version";
#endif  // VersionMenu
PROGMEM const char * const mainmenu_items[] = {
		mainmenu_0_label,
		mainmenu_1_label,
		mainmenu_2_label,
		mainmenu_3_label,
#ifdef LEAKDETECTOREXPANSION
		mainmenu_11_label,
#endif  // LEAKDETECTOREXPANSION
		mainmenu_4_label,
#ifdef SALINITYEXPANSION
		mainmenu_5_label,
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
		mainmenu_6_label,
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
		mainmenu_7_label,
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
		mainmenu_8_label,
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef DateTimeSetup
		mainmenu_9_label,
#endif  // DateTimeSetup
#ifdef VersionMenu
		mainmenu_10_label
#endif  // VersionMenu
};
enum MainMenuItem {
	MainMenu_FeedingMode,
	MainMenu_WaterChangeMode,
	MainMenu_ATOClear,
	MainMenu_OverheatClear,
#ifdef LEAKDETECTOREXPANSION
	MainMenu_LeakClear,
#endif  // LEAKDETECTOREXPANSION
	MainMenu_PHCalibration,
#ifdef SALINITYEXPANSION
	MainMenu_SalinityCalibration,
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
	MainMenu_ORPCalibration,
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
	MainMenu_PHExpCalibration,
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
	MainMenu_WaterCalibration,
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef DateTimeSetup
	MainMenu_DateTime,
#endif  // DateTimeSetup
#ifdef VersionMenu
	MainMenu_Version
#endif  // VersionMenu
};

#else  // SIMPLE_MENU
// This is the standard menu

// Main Menu
const prog_char mainmenu_0_label[] PROGMEM = "Feeding";
const prog_char mainmenu_1_label[] PROGMEM = "Water Change";
#ifndef RemoveAllLights
const prog_char mainmenu_2_label[] PROGMEM = "Lights ->";
#endif  // RemoveAllLights
const prog_char mainmenu_3_label[] PROGMEM = "Temps ->";
#if defined SetupExtras || defined ATOSetup
const prog_char mainmenu_4_label[] PROGMEM = "Timeouts ->";
#endif  // if defined SetupExtras || defined ATOSetup
const prog_char mainmenu_5_label[] PROGMEM = "Setup ->";
#ifdef LEAKDETECTOREXPANSION
const prog_char mainmenu_7_label[] PROGMEM = "Leak Clear";
#endif  // LEAKDETECTOREXPANSION
#ifdef VersionMenu
const prog_char mainmenu_6_label[] PROGMEM = "Version";
#endif  // VersionMenu
PROGMEM const char * const mainmenu_items[] = {
		mainmenu_0_label,
		mainmenu_1_label,
#ifndef RemoveAllLights
		mainmenu_2_label,
#endif  // RemoveAllLights
		mainmenu_3_label,
#if defined SetupExtras || defined ATOSetup
		mainmenu_4_label,
#endif  // if defined SetupExtras || defined ATOSetup
		mainmenu_5_label,
#ifdef LEAKDETECTOREXPANSION
		mainmenu_7_label,
#endif  // LEAKDETECTOREXPANSION
#ifdef VersionMenu
		mainmenu_6_label
#endif  // VersionMenu
};
enum MainMenuItem {
	MainMenu_FeedingMode,
	MainMenu_WaterChangeMode,
#ifndef RemoveAllLights
	MainMenu_Lights,
#endif  // RemoveAllLights
	MainMenu_Temps,
#if defined SetupExtras || defined ATOSetup
	MainMenu_Timeouts,
#endif  // if defined SetupExtras || defined ATOSetup
	MainMenu_Setup,
#ifdef LEAKDETECTOREXPANSION
	MainMenu_LeakClear,
#endif  // LEAKDETECTOREXPANSION
#ifdef VersionMenu
	MainMenu_Version
#endif  // VersionMenu
};


// Setup MenuWavemakerSetup
#ifdef WavemakerSetup
const prog_char setupmenu_0_label[] PROGMEM = "Wavemaker";
#endif  // WavemakerSetup
#ifdef DosingPumpSetup
const prog_char setupmenu_1_label[] PROGMEM = "Single Dose";
#endif  // DosingPumpSetup
#ifdef DosingPumpIntervalSetup
const prog_char setupmenu_2_label[] PROGMEM = "Multi Dose";
#endif  // DosingPumpIntervalSetup
const prog_char setupmenu_3_label[] PROGMEM = "Calibrate pH";
#ifdef SALINITYEXPANSION
const prog_char setupmenu_4_label[] PROGMEM = "Calibrate Sal";
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
const prog_char setupmenu_5_label[] PROGMEM = "Calibrate ORP";
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
const prog_char setupmenu_6_label[] PROGMEM = "Calibrate PH Exp";
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
const prog_char setupmenu_7_label[] PROGMEM = "Calibrate Water";
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef DateTimeSetup
const prog_char setupmenu_8_label[] PROGMEM = "Date / Time";
#endif  // DateTimeSetup
PROGMEM const char * const setupmenu_items[] = {
#ifdef WavemakerSetup
		setupmenu_0_label,
#endif  // WavemakerSetup
#ifdef DosingPumpSetup
		setupmenu_1_label,
#endif  // DosingPumpSetup
#ifdef DosingPumpIntervalSetup
		setupmenu_2_label,
#endif  // DosingPumpIntervalSetup
		setupmenu_3_label,
#ifdef SALINITYEXPANSION
		setupmenu_4_label,
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
		setupmenu_5_label,
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
		setupmenu_6_label,
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
		setupmenu_7_label,
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef DateTimeSetup
		setupmenu_8_label
#endif  // DateTimeSetup
};
enum SetupMenuItem {
#ifdef WavemakerSetup
	SetupMenu_Wavemaker,
#endif  // WavemakerSetup
#ifdef DosingPumpSetup
	SetupMenu_DosingPump,
#endif  // DosingPumpSetup
#ifdef DosingPumpIntervalSetup
	SetupMenu_DosingPumpInterval,
#endif  // DosingPumpIntervalSetup
	SetupMenu_CalibratePH,
#ifdef SALINITYEXPANSION
	SetupMenu_CalibrateSalinity,
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
	SetupMenu_CalibrateORP,
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
	SetupMenu_PHExpCalibration,
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
	SetupMenu_WaterCalibration,
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef DateTimeSetup
	SetupMenu_DateTime
#endif  // DateTimeSetup
};

#ifndef RemoveAllLights
// Lights Menu
const prog_char lightsmenu_0_label[] PROGMEM = "Lights On";
const prog_char lightsmenu_1_label[] PROGMEM = "Lights Off";
#ifdef MetalHalideSetup
const prog_char lightsmenu_2_label[] PROGMEM = "Metal Halides";
const prog_char lightsmenu_3_label[] PROGMEM = "MH On Delay";
#endif  // MetalHalideSetup
#ifdef StandardLightSetup
const prog_char lightsmenu_4_label[] PROGMEM = "Standard Lights";
#endif  // StandardLightSetup
#ifdef DisplayLEDPWM
const prog_char lightsmenu_5_label[] PROGMEM = "LED PWM";
#endif  // DisplayLEDPWM
PROGMEM const char * const lightsmenu_items[] = {
		lightsmenu_0_label, lightsmenu_1_label,
#ifdef MetalHalideSetup
		lightsmenu_2_label,
		lightsmenu_3_label,
#endif  // MetalHalideSetup
#ifdef StandardLightSetup
		lightsmenu_4_label,
#endif  // StandardLightSetup
#ifdef DisplayLEDPWM
		lightsmenu_5_label
#endif  // DisplayLEDPWM
};
enum LightsMenuItem {
	LightsMenu_On,
	LightsMenu_Off,
#ifdef MetalHalideSetup
	LightsMenu_MetalHalides,
	LightsMenu_MetalHalideDelay,
#endif  // MetalHalideSetup
#ifdef StandardLightSetup
	LightsMenu_StandardLights,
#endif  // StandardLightSetup
#ifdef DisplayLEDPWM
	LightsMenu_LEDPWM
#endif  // DisplayLEDPWM
};
#endif  // RemoveAllLights

// Temps Menu
const prog_char tempsmenu_0_label[] PROGMEM = "Heater";
const prog_char tempsmenu_1_label[] PROGMEM = "Chiller";
#ifdef OverheatSetup
const prog_char tempsmenu_2_label[] PROGMEM = "Overheat Set";
#endif  // OverheatSetup
const prog_char tempsmenu_3_label[] PROGMEM = "Overheat Clear";
PROGMEM const char * const tempsmenu_items[] = {
		tempsmenu_0_label,
		tempsmenu_1_label,
#ifdef OverheatSetup
		tempsmenu_2_label,
#endif  // OverheatSetup
		tempsmenu_3_label};
enum TempsMenuItem {
	TempsMenu_Heater,
	TempsMenu_Chiller,
#ifdef OverheatSetup
	TempsMenu_Overheat,
#endif  // OverheatSetup
	TempsMenu_OverheatClr
};

// Timeouts Menu
#if defined SetupExtras || defined ATOSetup
#ifdef ATOSetup
const prog_char timeoutsmenu_0_label[] PROGMEM = "ATO Set";
#ifdef SingleATOSetup
const prog_char timeoutsmenu_1_label[] PROGMEM = "ATO Interval";
#endif  // SingleATOSetup
const prog_char timeoutsmenu_2_label[] PROGMEM = "ATO Clear";
#endif  // ATOSetup
#ifdef SetupExtras
const prog_char timeoutsmenu_3_label[] PROGMEM = "Feeding";
const prog_char timeoutsmenu_4_label[] PROGMEM = "LCD";
#endif  // SetupExtras
PROGMEM const char * const timeoutsmenu_items[] = {
#ifdef ATOSetup
		timeoutsmenu_0_label,
#ifdef SingleATOSetup
		timeoutsmenu_1_label,
#endif  // SingleATOSetup
		timeoutsmenu_2_label,
#endif  // ATOSetup
#ifdef SetupExtras
		timeoutsmenu_3_label,
		timeoutsmenu_4_label
#endif  // SetupExtras
};
enum TimeoutsMenuItem {
#ifdef ATOSetup
	TimeoutsMenu_ATOSet,
#ifdef SingleATOSetup
	TimeoutsMenu_ATOHrInterval,
#endif  // SingleATOSetup
	TimeoutsMenu_ATOClear,
#endif  // ATOSetup
#ifdef SetupExtras
	TimeoutsMenu_Feeding,
	TimeoutsMenu_LCD
#endif  // SetupExtras
};
#endif // if defined SetupExtras || defined ATOSetup

#endif  // SIMPLE_MENU
#endif  // CUSTOM_MENU

void ReefAngelClass::ShowInterface()
{
	Refresh();
#ifdef MAIN_2014
	if (now()-RAStart<=3) return;
	if (Splash)
	{
		Splash=false;
		ClearScreen(DefaultBGColor);
	}
#endif // MAIN_2014
	// are we displaying the menu or not??
	if ( showmenu )
	{
		DisplayMenuHeading();
		DisplayMenu();
	}
	else
	{
		// not displaying the menu, so we're gonna show the appropriate screen
		switch ( DisplayedMenu )
		{
		case TOUCH_MENU:
		#ifdef DateTimeSetup
	        case DATE_TIME_MENU:
	            #ifdef DATETIME24
	            DisplaySetupDateTime24();
	            #else
	            DisplaySetupDateTime();
	            #endif
	            break;
	        #endif // DateTimeSetup
		case PH_CALIBRATE_MENU:
                    DisplaySetupCalibrateChoicePH();
                    break;
                #if defined SALINITYEXPANSION
		case SAL_CALIBRATE_MENU:
                    DisplaySetupCalibrateSalinity();
                    break;
                #endif SALINITYEXPANSION
		case ORP_CALIBRATE_MENU:
                #ifdef PHEXPANSION
		case PHE_CALIBRATE_MENU:
                    DisplaySetupCalibrateChoicePHExp();
                    break;
                #endif //PHEXPANSION
		case WL_CALIBRATE_MENU:
		case DEFAULT_MENU:  // This is the home screen
		{
#ifdef CUSTOM_MAIN
			DrawCustomMain();
#elif defined MAIN_2014
			Draw2014Main();
#else
			DrawStandardMain();
#endif  // CUSTOM_MAIN
			StoreGraphData();
			CheckScreenSaver();
			break;
		}  // DEFAULT_MENU
		case FEEDING_MODE:
		{
			DisplayFeedingMode();
			break;
		}
		case WATERCHANGE_MODE:
		{
			DisplayWaterChangeMode();
			break;
		}
#ifdef CUSTOM_MENU
		case ALT_SCREEN_MODE:
		{
			/*
				for Custom Menus if displaying an alternate screen, to force the menu to be
				redrawn when exiting the screen.  Used primarily for SetupCalibratePH
				and with SetupDateTime.
				Or used when you draw your own screen and stay inside the function and want to
				return to the menu when your function exits
				If not used, then you will have to press the button 2 times to return to the
				main menu.
			 */
			redrawmenu = true;
			showmenu = true;
			SetDisplayedMenu(MAIN_MENU);
			break;
		}
		case RETURN_MAIN_MODE:
		{
			ExitMenu();
			break;
		}
#endif  // CUSTOM_MENU
		default:
		{
			// we are viewing another screen, primarily the DisplayMenuEntry screen
			if ( Joystick.IsButtonPressed() )
			{
				// button is pressed, so we gotta exit out, show the menu & redraw it too
				redrawmenu = true;
				showmenu = true;
				Timer[FEEDING_TIMER].ForceTrigger();
				Timer[LCD_TIMER].Start();
			}
			break;
		}
		}  // switch DisplayedMenu
	}  // if showmenu
}

const unsigned PROGMEM char RA_LOGO[] = {
0xFF, 0xFF, 0x97, 0x4F, 0x73, 0x93, 0x97, 0x97, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x97, 0x97, 0x97, 0x97,
0x97, 0x93, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x97, 0x97, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDB, 0x97, 0x93, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x93, 0x97, 0x97, 0x97, 0x97,
0x97, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x97, 0x97, 0x73, 0x73, 0x4F, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xBB, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0x97, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x97, 0x73,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x93, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xBB, 0x97, 0x73, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB7, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x73, 0x73, 0x97, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xB7, 0x97, 0x97, 0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB7, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73,
0x73, 0x97, 0x97, 0xBB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x97, 0x4F, 0x4F, 0x73, 0x73, 0x73, 0x73, 0x93, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x4F, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x93, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x4F, 0x97, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x97, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x97, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0xB7, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x73,
0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0x4F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x73, 0x93, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97,
0x97, 0x97, 0x97, 0xB7, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xDB, 0x97, 0x93, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0xBB, 0xFF, 0xB7, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x97, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x73, 0x4F, 0x73, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x4F, 0x93, 0xDB, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0x97, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73,
0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F,
0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x97, 0xBB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB,
0xBB, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0x73, 0xDB, 0xDB, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0x93, 0x73, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x97, 0xBB,
0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x93, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x73, 0x97, 0xB7, 0xDB, 0xDB, 0xB7,
0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x93, 0xB7, 0xDB, 0xDB, 0x97, 0x97, 0x73, 0x73, 0x2F, 0x2F, 0x2F, 0x2F,
0x4F, 0x73, 0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0x73, 0x4F, 0x2F, 0x2F, 0x2F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0xB7, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x73, 0x73, 0x73, 0x73, 0x97, 0xBB, 0xDB, 0x73, 0x2F, 0x97, 0xDB,
0xFF, 0xDB, 0x73, 0x2F, 0x97, 0xDB, 0xB7, 0x93, 0x73, 0x73, 0x73, 0x93, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBB, 0x93, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xDB, 0x73, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x92, 0xB6, 0xFF, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x6D, 0x6D, 0x6D, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x25,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x6D, 0x24,
0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x25, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x24, 0x92, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x49, 0x24, 0x92,
0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x24, 0x24, 0x49, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x24, 0x92, 0xFF, 0x0,
0x0, 0x0, 0x0, 0x24, 0x49, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x0,
0x0, 0x0, 0x25, 0xB6, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x25, 0x24, 0x24, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0,
0x0, 0x6D, 0xFF, 0xFF, 0xDB, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xDB, 0x92, 0x49, 0x49, 0x49, 0x6D, 0x92, 0xDB,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x6D, 0x49, 0x49, 0x49, 0x6D, 0x92, 0xFF, 0xFF, 0xFF, 0x6D, 0x49, 0x0, 0x0, 0x0,
0x49, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x92, 0x49, 0x24, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xB6, 0xB6, 0xFF, 0xB6, 0x92, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x92, 0x92, 0xDB, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xB6, 0x92, 0x92, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x6D,
0xFF, 0xFF, 0xDA, 0x0, 0x0, 0x0, 0x0, 0x92, 0xFF, 0xB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDA, 0xFF,
0xFF, 0xFF, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25, 0xDB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0xFF, 0xB6, 0x24, 0x24, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x25, 0x24,
0x92, 0x6D, 0x24, 0x24, 0x24, 0x49, 0xFF, 0xFF, 0xFF, 0xDB, 0x25, 0x6D, 0xB6, 0x6D, 0x24, 0x49, 0x49, 0x49, 0xFF, 0xFF,
0x6D, 0x49, 0x92, 0x49, 0x24, 0x49, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x24, 0x49, 0x25,
0x0, 0x0, 0x0, 0x0, 0x0, 0xDB, 0xDB, 0x0, 0x0, 0x0, 0x0, 0x24, 0x24, 0x0, 0x0, 0x0, 0x0, 0xDB, 0xFF, 0xB6,
0x0, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0, 0x49, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x6D, 0xFF, 0xFF, 0x25, 0x24, 0x8E, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x6D, 0x24, 0x25, 0x92,
0xFF, 0xDB, 0x24, 0x24, 0xDB, 0xFF, 0xFF, 0x49, 0x24, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0x92, 0xB6, 0xFF, 0x8E, 0x49, 0xFF,
0xFF, 0xFF, 0x49, 0x24, 0x6D, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x92, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x49, 0xFF, 0xFF, 0x49, 0x0, 0x0, 0x0, 0x92, 0xFF, 0x24, 0x0, 0x0,
0x0, 0x92, 0xFF, 0xDB, 0x24, 0x0, 0x0, 0x0, 0xDA, 0x6D, 0x49, 0x0, 0x0, 0x0, 0x49, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF,
0xFF, 0xDB, 0x24, 0xDB, 0xFF, 0xFF, 0x92, 0x24, 0x25, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x8E, 0xFF, 0xFF, 0xFF,
0x49, 0x24, 0xB6, 0xFF, 0xDB, 0x24, 0x25, 0xFF, 0xFF, 0xFF, 0x8E, 0x24, 0x92, 0xFF, 0xFF, 0x24, 0x6D, 0xB6, 0xB6, 0xB6,
0x6D, 0x24, 0x25, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDA,
0xFF, 0xFF, 0x24, 0x0, 0x0, 0x0, 0x6D, 0x6D, 0x6D, 0x49, 0x0, 0x0, 0x0, 0x49, 0xDB, 0x0, 0x0, 0x0, 0x0, 0x6D,
0x6D, 0x6D, 0x25, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D,
0x49, 0xDB, 0xB6, 0xB6, 0xDB, 0x24, 0x24, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0xFF, 0xFF, 0x49, 0x24,
0xB6, 0xFF, 0xB6, 0x24, 0x24, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0xB6, 0x24, 0x49, 0x92, 0x92, 0x92, 0x92, 0x92,
0x92, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x6D, 0x92, 0x0, 0x0, 0x0, 0x0, 0x25, 0xDB, 0xFF,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x49, 0xB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x24, 0x49, 0x49,
0x8E, 0x6D, 0x49, 0x24, 0x24, 0x49, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0xB6, 0xFF,
0xFF, 0x49, 0x24, 0xB6, 0xFF, 0xFF, 0x6D, 0x24, 0xB6, 0xFF, 0xB6, 0x24, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x92, 0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0x0, 0x0,
0x0, 0x0, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x92, 0xDB, 0x0, 0x0, 0x0, 0x0, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D,
0x6D, 0x6D, 0xB6, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x49, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xB6, 0x24, 0x24, 0xB6, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0xB6, 0xFF, 0xFF, 0xDB,
0x25, 0x25, 0xB6, 0x92, 0x24, 0x8E, 0xFF, 0xFF, 0xB6, 0x24, 0x49, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0xFF, 0xFF, 0x92,
0x24, 0x92, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xDB, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDB, 0x49, 0x0, 0x0, 0x0,
0x6D, 0xFF, 0xFF, 0xB6, 0x6D, 0x92, 0xB6, 0xDB, 0xFF, 0x24, 0x0, 0x0, 0x0, 0xB6, 0xFF, 0xFF, 0x92, 0x6D, 0xB6, 0xB6,
0xDB, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x49, 0x24, 0x6D, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0xB6, 0xFF, 0xFF, 0xDB, 0x49, 0x92,
0x92, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0x24, 0x24, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0xFF, 0xFF, 0x92, 0x24, 0x92,
0xFF, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x0, 0x6D, 0xB6, 0x0, 0x0, 0x0, 0x0, 0x25,
0x25, 0x0, 0x0, 0x0, 0x0, 0xB6, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x0, 0x49, 0x25, 0x0, 0x0, 0x0, 0x0, 0xDB, 0xFF,
0x6D, 0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24,
0x24, 0xDB, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0xB6, 0xFF, 0xFF, 0x49, 0x49, 0xB6, 0xB6, 0xDB,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0x24, 0x92, 0xB6, 0xB6, 0x49, 0x92, 0xFF, 0xFF, 0x8E, 0x24, 0x92, 0xFF, 0x0,
0x0, 0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xDB, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDB, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x92, 0xFF, 0xFF, 0xFF, 0x6D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xDA, 0xFF, 0xFF, 0x6D, 0x0,
0x0, 0x0, 0x6D, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x8E, 0x24, 0x24, 0x49,
0xDB, 0xFF, 0x6D, 0x24, 0x49, 0xDB, 0xFF, 0xDB, 0x49, 0x24, 0x6D, 0xFF, 0xFF, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
0x49, 0xFF, 0xFF, 0xDB, 0x25, 0x24, 0x24, 0x24, 0x24, 0x49, 0xFF, 0xFF, 0xDB, 0x49, 0x24, 0x6D, 0xDB, 0x49, 0x49, 0x49,
0x49, 0x92, 0xFF, 0xFF, 0xFF, 0x92, 0x49, 0x49, 0x49, 0x49, 0x92, 0xFF, 0xB6, 0x6D, 0x49, 0x49, 0x49, 0x49, 0x6D, 0xB6,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x49, 0x49, 0x49, 0x49, 0x49, 0x6D, 0xDB, 0xFF, 0xFF, 0xFF, 0x92, 0x49, 0x49, 0x49,
0x92, 0xFF, 0xFF, 0xDB, 0x92, 0x92, 0x92, 0x92, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x92, 0x92, 0x92, 0x92, 0x92, 0xB6,
0x92, 0x92, 0x92, 0x92, 0xB6, 0x92, 0x92, 0x92, 0x92, 0xB6, 0xFF, 0x92, 0x49, 0x6D, 0x49, 0x49, 0x49, 0x49, 0x24, 0x6D,
0xFF, 0xFF, 0xDB, 0x6D, 0x49, 0x49, 0x92, 0xFF, 0xFF, 0xFF, 0x92, 0x92, 0x92, 0x92, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x49, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x49, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x8E, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x24, 0x25, 0x8E, 0x92, 0x92, 0x92, 0x49, 0x49, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x6D, 0x25, 0x24, 0x24, 0x24, 0x49, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

#ifdef MAIN_2014

const unsigned PROGMEM char ARROW_RIGHT[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xFF, 0xFF, 0xDB, 0x96,
0xB7, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x96, 0x4A, 0xB7, 0xDB, 0xFF, 0xFF,
0xFF, 0xFF, 0xDB, 0xB7, 0x97, 0xB7, 0x92, 0xB7, 0x72, 0x92, 0x2A, 0x4A, 0xB6, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0x72,
0x96, 0x72, 0x92, 0x6E, 0x92, 0x2A, 0x2A, 0x2A, 0xB6, 0xDB, 0xFF, 0xFF, 0xDB, 0x97, 0x72, 0x92, 0x6E, 0x92, 0x6E, 0x72,
0x2A, 0x26, 0x25, 0x25, 0xB7, 0xDB, 0xFF, 0xDB, 0x96, 0x72, 0x92, 0x6E, 0x72, 0x4E, 0x6E, 0x25, 0x25, 0x25, 0x6E, 0xDB,
0xFF, 0xFF, 0xDB, 0x96, 0x72, 0x92, 0x6E, 0x92, 0x4E, 0x6E, 0x25, 0x25, 0x8E, 0xDB, 0xDB, 0xFF, 0xFF, 0xDB, 0xDA, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0x6E, 0x1, 0x92, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x6E,
0x6E, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

const unsigned PROGMEM char ARROW_LEFT[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0x96, 0xDB, 0xFF,
0xFF, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xB7, 0x4A, 0x96, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0xDB,
0xFF, 0xFF, 0xFF, 0xDB, 0xB6, 0x4A, 0x2A, 0x92, 0x72, 0xB7, 0x92, 0xB7, 0x97, 0xB7, 0xDB, 0xFF, 0xFF, 0xDB, 0xB6, 0x2A,
0x2A, 0x2A, 0x92, 0x6E, 0x92, 0x72, 0x96, 0x72, 0xB7, 0xDB, 0xFF, 0xDB, 0xB7, 0x25, 0x25, 0x26, 0x2A, 0x72, 0x6E, 0x92,
0x6E, 0x92, 0x72, 0x97, 0xDB, 0xFF, 0xFF, 0xDB, 0x6E, 0x25, 0x25, 0x25, 0x6E, 0x4E, 0x72, 0x6E, 0x92, 0x72, 0x96, 0xDB,
0xFF, 0xFF, 0xDB, 0xDB, 0x8E, 0x25, 0x25, 0x6E, 0x4E, 0x92, 0x6E, 0x92, 0x72, 0x96, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB,
0x92, 0x1, 0x6E, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0x6E, 0x6E, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xB7, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

const unsigned PROGMEM char ATO_GREEN[] = {
0xFF, 0xB6, 0x92, 0x92, 0x92, 0x92, 0xB6, 0xFF, 0xB6, 0x92, 0xDF, 0xBA, 0x9A, 0x79, 0x92, 0xB6, 0x92, 0xBA, 0x9A,
0x79, 0x59, 0x34, 0x10, 0x92, 0x92, 0x79, 0x59, 0x14, 0x14, 0x10, 0x8, 0x92, 0x92, 0x35, 0x35, 0x14, 0x14, 0xC, 0x4,
0x92, 0x92, 0x10, 0x10, 0xC, 0x8, 0x4, 0x0, 0x92, 0xB6, 0x92, 0x4, 0x0, 0x0, 0x0, 0x92, 0xB6, 0xFF, 0xB6, 0x92,
0x92, 0x92, 0x92, 0xB6, 0xFF};

const unsigned PROGMEM char ATO_RED[] = {
0xFF, 0xB6, 0x92, 0x92, 0x92, 0x92, 0xB6, 0xFF, 0xB6, 0x92, 0xFB, 0xF6, 0xF2, 0xED, 0x92, 0xB6, 0x92, 0xF6, 0xF2,
0xED, 0xE9, 0xE4, 0xA0, 0x92, 0x92, 0xED, 0xE9, 0xE0, 0xE0, 0xC0, 0x60, 0x92, 0x92, 0xE5, 0xE4, 0xE0, 0xE0, 0x80, 0x20,
0x92, 0x92, 0xC0, 0xA0, 0x80, 0x60, 0x20, 0x0, 0x92, 0xB6, 0x92, 0x20, 0x0, 0x0, 0x0, 0x92, 0xB6, 0xFF, 0xB6, 0x92,
0x92, 0x92, 0x92, 0xB6, 0xFF};

const unsigned PROGMEM char RA_WING[] = {
0x97, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x73, 0xB7, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x97, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F,
0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0xDB, 0xFF, 0xFF, 0xDB, 0xBB, 0x93, 0x73, 0x73, 0x73, 0x73, 0x73,
0x73, 0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x97, 0x4F,
0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0xB7, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDB, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0xBB, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0x73, 0x73, 0x73, 0x73,
0x73, 0x73, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0x97, 0x97, 0x97,
0x97, 0x97, 0x97, 0x97, 0x73, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0xDB, 0xFF, 0x73, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73,
0x93, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0xBB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x97, 0x73, 0x73, 0x73, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
0x2F, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x4F, 0x73, 0x73, 0x73, 0x73, 0x93, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xDB, 0xDB, 0xDB, 0xDB, 0x97, 0x73, 0x4F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x73, 0x97, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB7, 0x73, 0x73, 0x2F, 0x73, 0x73, 0x93, 0x73, 0x2F, 0x2F, 0x2F,
0x2F, 0x4F, 0x73, 0x93, 0x73, 0x4F, 0x4F, 0x73, 0x93, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xDB, 0x97, 0x93, 0x73, 0x93, 0x2F, 0x73, 0x97, 0x4F, 0x4F, 0x73, 0x73, 0x97, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF};

const unsigned PROGMEM char RELAY_RED[] = {
0xF6, 0xFA, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF2, 0xF2, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xF2, 0xED, 0xED, 0xED, 0xED,
0xED, 0xED, 0xED, 0xE9, 0xE5, 0xFF, 0xFF, 0xE9, 0xE9, 0xE5, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE5, 0xE0, 0xC0, 0xFF,
0xE9, 0xE5, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xA0, 0xFF, 0xE9, 0xE5, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
0xE0, 0xE0, 0xE0, 0xC0, 0xA0, 0x60, 0xE9, 0xE5, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x40, 0xE9,
0xE5, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xA0, 0x60, 0x20, 0xE9, 0xE5, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
0xE0, 0xC0, 0x80, 0x40, 0x0, 0xE9, 0xE5, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xA0, 0x60, 0x20, 0xFF, 0xE5, 0xE0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xA0, 0x80, 0x40, 0x20, 0x0, 0xFF, 0xC0, 0xA0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0x20,
0x20, 0x0, 0xFF, 0xFF, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF};

const unsigned PROGMEM char RELAY_GREEN[] = {
0xBE, 0xDF, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0xFF, 0xFF, 0xFF, 0xFF, 0x9A, 0x9A, 0x7A, 0x7A, 0x7A, 0x7A,
0x7A, 0x7A, 0x7A, 0x59, 0x39, 0xFF, 0xFF, 0x59, 0x59, 0x39, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x39, 0x15, 0x11, 0xFF,
0x59, 0x39, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x10, 0xFF, 0x59, 0x39, 0x15, 0x15, 0x15, 0x15, 0x15,
0x15, 0x15, 0x15, 0x15, 0xC, 0x8, 0x59, 0x39, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0xC, 0x4, 0x59,
0x39, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x11, 0x8, 0x4, 0x59, 0x39, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
0x15, 0x15, 0xC, 0x4, 0x0, 0x59, 0x39, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x10, 0x8, 0x0, 0xFF, 0x39, 0x15,
0x15, 0x11, 0x11, 0x11, 0x11, 0x10, 0xC, 0x8, 0x4, 0x0, 0xFF, 0x15, 0xC, 0xC, 0x8, 0x8, 0x8, 0x8, 0x8, 0x4,
0x0, 0x0, 0xFF, 0xFF, 0x8, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF};

const unsigned PROGMEM char RELAY_BAR[] = {
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0xB6, 0xDB, 0xDB, 0xDB, 0xDA,
0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA,
0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xB6, 0xB6, 0x49, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0x6D, 0x24, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x92, 0x6D,
0x24, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x92, 0x6D, 0x24, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x92, 0x6D, 0x24, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0x92, 0x6D, 0x24, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x92, 0x6D,
0x24, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x92, 0x6D, 0x24, 0xB6, 0xB6, 0x92, 0x92,
0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92,
0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x49, 0x24, 0x92, 0x6D, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
0x49, 0x49, 0x49, 0x49, 0x24, 0x0, 0x49, 0x24, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0};

const unsigned PROGMEM char RELAY_AUTO[] = {
0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0x0,
0x0, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6,
0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0x0, 0xB6, 0x0, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0x0, 0xB6,
0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6,
0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0,
0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0x0, 0x0,
0x0, 0xB6, 0xB6, 0xB6, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0xB6};

const unsigned PROGMEM char RELAY_ON[] = {
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0xB6, 0x0, 0x0, 0xB6, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0, 0x0, 0xB6, 0x0, 0x0,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6,
0x0, 0x0, 0xB6, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0x0,
0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6};

const unsigned PROGMEM char RELAY_OFF[] = {
0xB6, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB6, 0x0, 0x0, 0x0, 0x0,
0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6,
0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0, 0xB6, 0xB6,
0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0x0, 0x0,
0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0x0, 0x0, 0xB6, 0xB6,
0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0x0, 0x0, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6};

const unsigned PROGMEM char NO_ALERTS[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x6D, 0x92, 0xB6, 0x6D,
0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xDB, 0x49, 0x44, 0x44, 0x64, 0x64, 0x44, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0xAD, 0xD2, 0xD2, 0xCD, 0xCD, 0xA9, 0x24, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xD6, 0xFA, 0xF6, 0xD2, 0xD1, 0xA9, 0xA9, 0x64,
0x49, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xF6, 0xFB,
0xF6, 0xD2, 0xCD, 0xA9, 0xA9, 0xA9, 0x44, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xD2, 0xF2, 0xD2, 0xCD, 0xCD, 0xC9, 0xA9, 0xA9, 0xA9, 0x44, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xD6, 0xD1, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xC9, 0xA9, 0x45, 0xB6,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xD2, 0xD1, 0xB1, 0xAD, 0xAD, 0xCD, 0xCD,
0xCD, 0xCD, 0xCD, 0xCD, 0xAD, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xB6, 0xDA,
0xDA, 0xB6, 0xB6, 0x92, 0x6D, 0x69, 0xA9, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xD6, 0xFF, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xDB, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x69, 0xA9, 0xD1, 0xD2, 0xD2, 0xD1, 0x8D, 0x6D,
0x49, 0x69, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x92, 0x92, 0xBA, 0xFF, 0xDB, 0x92,
0xB2, 0xD2, 0xD2, 0xD2, 0xB6, 0xB2, 0xAD, 0xA9, 0x64, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x91, 0xD6, 0xDA, 0xD6, 0xB2, 0xD1,
0xD1, 0xA9, 0x69, 0x92, 0xFF, 0xDB, 0x92, 0xD2, 0xD2, 0xD2, 0xB6, 0xFF, 0xB2, 0xC9, 0xA9, 0x8D, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA,
0xF6, 0xFB, 0xFA, 0xF6, 0xF6, 0xF1, 0xCD, 0xCD, 0xCD, 0x69, 0x92, 0xFF, 0xDB, 0xB2, 0xD2, 0xD2, 0xB2, 0xDB, 0xDA, 0xA9,
0xA9, 0x69, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xFA, 0xFB, 0xFA, 0xF6, 0xF1, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0x69, 0x92, 0xFF, 0xB6,
0xB1, 0xD2, 0xD2, 0xDA, 0xFF, 0xAD, 0xA9, 0x69, 0xDB, 0xDA, 0xD6, 0xD2, 0xD2, 0xD2, 0xD1, 0xD1, 0xD1, 0xAD, 0x92, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xF1, 0xFA, 0xF6, 0xF1, 0xF1, 0xCD, 0xCD, 0xCD, 0xCD,
0xCD, 0xCD, 0xCD, 0x69, 0xDA, 0xDF, 0x92, 0xD2, 0xD2, 0xB6, 0xFF, 0xB6, 0xA9, 0x8D, 0xFF, 0x8D, 0xA9, 0xA9, 0xA9, 0xA9,
0xCD, 0xCD, 0xED, 0xED, 0x68, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0xF1, 0xF1, 0xED,
0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0x8D, 0xDB, 0xB6, 0xB2, 0xD2, 0xAD, 0xDA, 0xD6, 0xA9, 0x89,
0xDA, 0x8D, 0xA9, 0xA9, 0xA9, 0xAD, 0xCD, 0xCD, 0xCD, 0xED, 0xCD, 0x69, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xD6, 0xED, 0xED, 0xED, 0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xAD, 0xB2, 0xDB, 0x91,
0xCD, 0xA9, 0x8D, 0xD1, 0xCD, 0x89, 0x92, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xCD, 0xCD, 0xCD, 0xED, 0xED, 0xA9, 0x92, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xF1, 0xF6, 0xF1, 0xED, 0xED, 0xCD, 0xCD, 0xF6, 0xFB, 0xDA, 0xD6,
0xD2, 0xCD, 0xCD, 0xAD, 0xB6, 0x92, 0x89, 0xAD, 0xB1, 0xD2, 0xD2, 0xAD, 0x92, 0xAD, 0xAD, 0xAD, 0xAD, 0xB1, 0xB1, 0xD1,
0xD1, 0xD1, 0xD1, 0xB1, 0x92, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFB, 0xB6, 0xD2, 0xED, 0xED,
0xCD, 0xF6, 0xFF, 0xDA, 0x69, 0xAD, 0xDB, 0xD6, 0xCD, 0xC9, 0x69, 0xB6, 0x6D, 0xDB, 0xDF, 0xDF, 0xDB, 0xDB, 0xDA, 0xBA,
0xBA, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x79, 0x79, 0x79, 0x79, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xDB, 0xB6, 0x49, 0x68, 0xED, 0xED, 0xCD, 0xFA, 0xFB, 0x6D, 0x0, 0x64, 0xD6, 0xDB, 0xCD, 0xCD, 0x88, 0x92, 0x92, 0xDB,
0xFF, 0xDF, 0xDF, 0xDE, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0x9A, 0x79, 0x79, 0x79, 0x59, 0x59, 0x59, 0x34, 0x38, 0x38, 0x75,
0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x8D, 0x0, 0x64, 0xED, 0xED, 0xCD, 0xF6, 0xFF, 0xB1, 0x64, 0xAD, 0xDA, 0xDB,
0xD1, 0xCD, 0xA9, 0x8D, 0xB6, 0xDB, 0xFF, 0xDF, 0xDF, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0x9A, 0x99, 0x79, 0x79, 0x79, 0x59,
0x75, 0xBA, 0xBA, 0x79, 0x34, 0x75, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDA, 0xB1, 0xD1, 0xED, 0xED, 0xCD, 0xF1,
0xFB, 0xFB, 0xDA, 0xDB, 0xDB, 0xDA, 0xCD, 0xCD, 0xA9, 0x69, 0x92, 0xDB, 0xDF, 0xDF, 0xDE, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A,
0x9A, 0x79, 0x79, 0x79, 0x59, 0x75, 0xDB, 0xFF, 0xFF, 0xBA, 0x34, 0x75, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xD6, 0xFB,
0xDB, 0xF1, 0xED, 0xED, 0xCD, 0xCD, 0xD1, 0xFB, 0xFB, 0xDB, 0xD6, 0xCD, 0xCD, 0xCD, 0xC9, 0x69, 0x92, 0xDB, 0xDF, 0xDF,
0xDA, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0x99, 0x79, 0x79, 0x59, 0x75, 0xDB, 0xFF, 0xFF, 0xFF, 0xBA, 0x34, 0x75, 0xDB, 0xFF,
0xFF, 0xDB, 0xB6, 0xAD, 0xCD, 0xF1, 0xF1, 0xED, 0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD, 0xD1, 0xD1, 0xCD, 0xCD, 0xCD, 0xCD,
0xCD, 0x69, 0x92, 0xDB, 0xDF, 0xDE, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0x9A, 0x79, 0x79, 0x79, 0x75, 0xDA, 0xFF, 0xFF, 0xFF,
0xFF, 0x75, 0x34, 0x75, 0xDB, 0xFF, 0xDA, 0xB1, 0xCD, 0xCD, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD,
0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xA9, 0x69, 0x92, 0xDA, 0xDF, 0xDE, 0xBA, 0xBA, 0xBA, 0x9A, 0x9A, 0x79, 0x79, 0x59,
0x55, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0x75, 0x34, 0x38, 0x75, 0xDB, 0xFF, 0xB1, 0xD1, 0xF1, 0xD1, 0xCD, 0xED, 0xED, 0xED,
0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xC9, 0xCD, 0xCD, 0xCD, 0xCD, 0x69, 0x92, 0x92, 0xDA, 0xDE, 0xBA, 0xBA, 0xBA,
0x9A, 0x9A, 0x79, 0x59, 0x59, 0x59, 0x9A, 0xFF, 0xFF, 0xFF, 0xFF, 0x95, 0x34, 0x38, 0x38, 0x75, 0xDB, 0xDB, 0x8D, 0xF1,
0xF1, 0xD1, 0xCD, 0xED, 0xED, 0xED, 0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0x88, 0x92, 0x92,
0x6D, 0xDA, 0xDE, 0xBA, 0xBA, 0x9A, 0x79, 0x59, 0x79, 0x79, 0x59, 0x75, 0xFF, 0xFF, 0xFF, 0xFF, 0x9A, 0x34, 0x38, 0x38,
0x38, 0x71, 0xDB, 0xDB, 0x69, 0xF1, 0xF1, 0xD1, 0xCD, 0xCD, 0xED, 0xED, 0xED, 0xED, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
0xCD, 0xCD, 0x89, 0x6D, 0xB6, 0x92, 0x92, 0xBA, 0xBA, 0xBA, 0x9A, 0x79, 0x79, 0x79, 0x59, 0x34, 0x34, 0xDA, 0xFF, 0xFF,
0xFF, 0xBA, 0x34, 0x38, 0x38, 0x38, 0x59, 0x71, 0xDB, 0xFF, 0x8D, 0xCD, 0xF1, 0xD1, 0xCD, 0xCD, 0xCD, 0xCD, 0xED, 0xED,
0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0x8D, 0xB6, 0xDA, 0xDB, 0x92, 0xBA, 0xBA, 0xDF, 0xDB, 0xBA, 0x75, 0x34,
0x14, 0x14, 0x9A, 0xFF, 0xFF, 0xFF, 0xBA, 0x55, 0x38, 0x38, 0x38, 0x38, 0x59, 0x71, 0xDB, 0xFF, 0xB6, 0x8D, 0xF1, 0xD1,
0xCD, 0xCD, 0xC9, 0xC9, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xD1, 0xD2, 0xD6, 0xDB, 0xDB, 0xFF, 0xFF, 0x92, 0xBA,
0xDF, 0xFF, 0xFF, 0xFF, 0xBA, 0x34, 0x14, 0x55, 0xDF, 0xFF, 0xFF, 0xDF, 0x55, 0x38, 0x38, 0x38, 0x59, 0x59, 0x59, 0x71,
0xDB, 0xFF, 0xDB, 0x8D, 0x89, 0xCD, 0xCD, 0xCD, 0xC9, 0xA9, 0xA9, 0xA9, 0xA9, 0x89, 0xB6, 0xD6, 0xD6, 0xDB, 0xDB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x96, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xBA, 0x55, 0xBA, 0xFF, 0xFF, 0xFF, 0x9A, 0x34, 0x38,
0x38, 0x59, 0x59, 0x59, 0x59, 0x4D, 0xDB, 0xFF, 0xFF, 0xDB, 0x92, 0x69, 0xA9, 0xC9, 0xC9, 0xA9, 0xA9, 0xA9, 0x69, 0x92,
0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x71, 0x75, 0x9A, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF,
0xFF, 0xFF, 0xDB, 0x55, 0x38, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x4D, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0xB6, 0x92, 0x8D,
0x8D, 0x8D, 0x8D, 0x8D, 0xB6, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x96, 0xBA, 0x75,
0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9A, 0x38, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x71, 0xDB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x6D, 0x9A, 0x9A, 0x34, 0x34, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x55, 0x59, 0x59, 0x59, 0x59, 0x59,
0x59, 0x59, 0x59, 0x71, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x9A, 0x79, 0x34, 0x34, 0x34, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xBA,
0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x79, 0x96, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x9A, 0x59, 0x38, 0x38, 0x38,
0x35, 0xBA, 0xFF, 0xFF, 0xDF, 0x75, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x79, 0x79, 0x96, 0xDB, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x92, 0x9A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x55, 0x79, 0xBA, 0x99, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x79, 0x79, 0x79,
0x79, 0x96, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x79, 0x38, 0x38, 0x38, 0x38, 0x38, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59,
0x59, 0x59, 0x79, 0x79, 0x79, 0x79, 0x79, 0xB6, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x96, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75,
0x75, 0x75, 0x75, 0x95, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xFF};

const unsigned PROGMEM char NO_STATUS[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0xB6, 0xB6, 0xB6, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA,
0xB6, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xDB, 0x92, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDA, 0xB6, 0xDA, 0xDA, 0xDA,
0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x24, 0x25, 0xDB, 0xFF, 0xFF, 0xFF, 0xDB, 0xDA, 0xB6, 0xB6, 0xB6,
0xB6, 0x92, 0x92, 0x92, 0x6E, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x6E, 0x92, 0x92, 0x92,
0x92, 0x92, 0x92, 0x92, 0x92, 0xB6, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x0, 0x24, 0x24, 0x24, 0x6D,
0xFF, 0xFF, 0xDA, 0x92, 0x49, 0x49, 0x49, 0x49, 0x49, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA,
0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x24, 0x24, 0x24, 0x24, 0x49, 0x92, 0x92, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xB6, 0x0, 0x0, 0x24, 0x92, 0xDA, 0xB6, 0xB6, 0x49, 0x25, 0x49, 0x49, 0x49, 0x49, 0x49, 0xB6, 0xDA, 0xDA,
0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x24, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x6D, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x24, 0x92, 0xDB, 0x92, 0x49, 0x49, 0x24, 0x25,
0x49, 0x6D, 0x6D, 0x6D, 0x6D, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0x92, 0x92, 0x92, 0x92, 0x92, 0x49, 0x0, 0x0, 0x92, 0xB6, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xB6, 0xB6, 0x6D, 0x24, 0x25, 0x25, 0x25, 0x25, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x92, 0x0, 0x0, 0x24,
0x92, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x0, 0x24, 0x24, 0x49, 0x25, 0x25, 0x92, 0xDB, 0xDB, 0xDB,
0xDB, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0x92, 0x0, 0x0, 0x0, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x0, 0x24,
0x24, 0x25, 0x49, 0x25, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB7, 0xDB, 0x92, 0x0, 0x0, 0x0, 0x6D, 0xB6, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x0, 0x24, 0x24, 0x49, 0x49, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0xFF, 0xFF, 0xBB, 0x97, 0xDB, 0xDB,
0x92, 0x0, 0x0, 0x0, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x0, 0x24, 0x24, 0x49,
0x6D, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xB7, 0x73, 0xDB, 0x97, 0x97, 0xDB, 0xDB, 0xDB, 0xB6, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDA, 0x24, 0x0, 0x24, 0x24, 0x6D, 0x6D, 0xB6, 0xB6, 0xB6, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA,
0xBA, 0xBB, 0xBB, 0xBA, 0xBA, 0xBA, 0xDB, 0xDB, 0xDB, 0x97, 0x73, 0x97, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x0, 0x0, 0x0,
0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x49, 0x0, 0x0, 0x24, 0x25, 0x6D, 0x72, 0xB6,
0xB6, 0xB6, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBB, 0xDB, 0xDB, 0xBA, 0xBA, 0xBA, 0xBA, 0xDB, 0xDB, 0xDB, 0xDB, 0x97, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB,
0x49, 0x24, 0x0, 0x24, 0x24, 0x49, 0x6D, 0x96, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x49, 0x24, 0x0, 0x0, 0x24, 0x24, 0x6D, 0x6D, 0xB6, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xB6, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x49, 0x24, 0x24, 0x0,
0x0, 0x24, 0x24, 0x6D, 0x6D, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x0, 0x0, 0x0, 0x49, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDB, 0x49, 0x24, 0x24, 0x24, 0x0, 0x24, 0x24, 0x25, 0x6D, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x0, 0x0, 0x0,
0x49, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x49, 0x24, 0x24, 0x24, 0x49, 0x0, 0x24, 0x24,
0x49, 0x6D, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xB7, 0xDB, 0xDA, 0x0, 0x0, 0x0, 0x49, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA,
0x49, 0x24, 0x24, 0x24, 0x92, 0x6D, 0x0, 0x24, 0x24, 0x49, 0x49, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB7, 0xDB, 0xFF, 0xDB, 0x97, 0xDB, 0xDB, 0xDA, 0x0, 0x0, 0x0, 0x25, 0x92, 0xDB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24, 0x92, 0xDB, 0x4D, 0x24, 0x24, 0x24, 0x49, 0x6D,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x97, 0x97, 0xB7, 0x97, 0xDB, 0xDB, 0xDB,
0xDB, 0x0, 0x0, 0x0, 0x25, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24,
0x92, 0xBA, 0xB6, 0x24, 0x24, 0x24, 0x25, 0x49, 0x6D, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xDB,
0xDB, 0xDB, 0x77, 0x97, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x0, 0x0, 0x0, 0x24, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24, 0x92, 0xBA, 0xDA, 0x92, 0x49, 0x24, 0x24, 0x49, 0x49, 0x92, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x0, 0x0, 0x0,
0x24, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB,
0x92, 0x25, 0x24, 0x24, 0x49, 0x25, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x24, 0x0, 0x0, 0x24, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA,
0x49, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x24, 0x24, 0x24, 0x25, 0x49, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x24, 0x0, 0x0, 0x24, 0x92, 0xDB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0x49, 0x24,
0x24, 0x25, 0x24, 0x6D, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0x24, 0x0, 0x0, 0x0, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24,
0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x49, 0x24, 0x24, 0x25, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x24, 0x0, 0x0, 0x0, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDA, 0x49, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x92, 0x25, 0x24, 0x24, 0x25,
0x24, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB7, 0xBB, 0xDB, 0x25, 0x0, 0x0,
0x0, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x49, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x24, 0x24, 0x24, 0x24, 0x25, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x97, 0xFF,
0xDB, 0x97, 0xBB, 0xDB, 0xDB, 0x25, 0x0, 0x0, 0x0, 0x6E, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6,
0x25, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x49, 0x24, 0x24, 0x24, 0x24, 0x49, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x73, 0x97, 0x97, 0xBB, 0xDB, 0xDB, 0xDB, 0x25, 0x0, 0x0, 0x0, 0x6D, 0xDB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA,
0xBA, 0x92, 0x25, 0x24, 0x24, 0x24, 0x24, 0x6E, 0xBA, 0xBA, 0xBA, 0xDB, 0xDB, 0xDB, 0xBB, 0x73, 0xBB, 0xDB, 0xDB, 0xDB,
0xDB, 0x49, 0x0, 0x0, 0x0, 0x6D, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0x24, 0x24,
0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x72, 0x24, 0x24, 0x24, 0x24, 0x24, 0xB6, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x0, 0x0, 0x0, 0x6D, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x49,
0x0, 0x24, 0x45, 0xB1, 0xB6, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x0, 0x0,
0x0, 0x6D, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0x24, 0x44, 0x69, 0x8D, 0xB1, 0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x0, 0x0, 0x0, 0x6D, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6,
0x25, 0x24, 0x24, 0x24, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB6, 0x8D, 0x69, 0x6D,
0x91, 0xB2, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x49, 0x0, 0x0, 0x0, 0x49, 0xDA, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0x24, 0x24, 0x92, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0x8D, 0x69, 0x8D, 0x8D, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xBB, 0x6D, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25, 0x24, 0x24, 0x0,
0x92, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x8D, 0x6D, 0x8D, 0xB2, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xB7, 0xB7, 0xDB, 0x6D, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0x24, 0x24, 0x0, 0x92, 0xDB, 0xDB, 0xDA, 0xDA, 0xDA, 0xB6, 0xB6, 0xB6, 0xDA, 0xDA, 0xDA,
0xDB, 0xDB, 0xDB, 0xDB, 0x91, 0x6D, 0x48, 0xDB, 0xDB, 0xDB, 0x97, 0xBB, 0xDF, 0x97, 0xB7, 0xDB, 0xDB, 0x6D, 0x0, 0x0,
0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0x24, 0x0, 0x0, 0x92, 0xDB, 0xBA, 0xB6,
0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xBA, 0xBA, 0x6D, 0x0, 0x6D, 0xDB, 0xDB, 0xB7, 0x73,
0x97, 0xB7, 0xDB, 0xDB, 0xDB, 0x6D, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6,
0x24, 0x24, 0x0, 0x0, 0x92, 0xDB, 0xBA, 0xBA, 0xBA, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
0xB6, 0xBA, 0x6E, 0x24, 0xDB, 0xDB, 0xDB, 0x97, 0x97, 0xDB, 0xDB, 0xDB, 0xDB, 0x6D, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0x24, 0x0, 0x0, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDA, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xDA, 0xDB, 0x92, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0x6D, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0x0, 0x0, 0x0,
0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0xB6, 0xB6, 0xB6, 0xB6, 0xDA, 0xDB,
0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x92, 0x0, 0x0, 0x0, 0x25, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0x0, 0x0, 0x0, 0x92, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDA, 0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x92, 0x0, 0x0,
0x0, 0x25, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x24, 0x0, 0x0, 0x0, 0x6D, 0x92, 0x92, 0x92,
0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x6E, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D,
0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x49, 0x0, 0x0, 0x0, 0x25, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6,
0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x49, 0xB6, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x6D, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x24, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x92, 0x6D, 0x6D,
0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D,
0x6E, 0x6E, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0xB6, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB, 0xFF, 0xFF, 0xFF, 0xFF};

const unsigned PROGMEM char ATO_TIMEOUT_ICON[] = {
0xFF, 0xFF, 0xFF, 0x6D, 0x6D, 0x6D, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0xB6, 0xB6, 0xB6, 0xB6, 0x6D, 0xFF,
0xFF, 0xFF, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x6D, 0xFF, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0x6D, 0xFF, 0xFF, 0xB6,
0x6D, 0x6D, 0xB6, 0xFF, 0xFF, 0x6D, 0xFF, 0xFF, 0xFF, 0xB6, 0x6D, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0x6D, 0xFF, 0xFF, 0xB6,
0x6D, 0x6D, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0xFF, 0xB6, 0x6D, 0xFF, 0x25, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x25,
0xFF, 0xFF, 0xFF, 0x25, 0xB6, 0xB6, 0xB6, 0xB6, 0x25, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x25, 0x25, 0x6D, 0xFF, 0xFF,
0xFF};

const unsigned PROGMEM char OVERHEAT_ICON[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x0, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x24, 0xAD, 0x24, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0xE9, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0xE9, 0x0, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0xE9, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0xE9, 0x0, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x49, 0xE4, 0x49, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0xC9, 0xE0, 0xC9, 0x0, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x49, 0xC9, 0x49, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0x0, 0x6D, 0xFF, 0xFF,
0xFF};

const unsigned PROGMEM char BUSLOCK_ICON[] = {
0xFF, 0xFF, 0xFF, 0xDA, 0xB1, 0xB1, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0xFF, 0xFF, 0xB1, 0xFF, 0xFF,
0xFF, 0xFF, 0xD6, 0xD5, 0xB1, 0xB1, 0x8D, 0xB1, 0xB1, 0xD6, 0xFF, 0xFF, 0xD5, 0xFA, 0xFA, 0xD6, 0xD5, 0xD5, 0xF9, 0xD5,
0xFF, 0xFF, 0xD5, 0xB5, 0xD5, 0xD5, 0xB1, 0xB1, 0xD5, 0xD5, 0xFF, 0xFF, 0xD5, 0xFA, 0xFA, 0xD6, 0xD5, 0xD5, 0xF9, 0xD5,
0xFF, 0xFF, 0xB5, 0xB5, 0xD5, 0xD5, 0xB1, 0xB1, 0xD5, 0xB1, 0xFF, 0xFF, 0xB1, 0xFA, 0xFA, 0xFA, 0xD5, 0xD5, 0xF9, 0xB1,
0xFF, 0xDB, 0x91, 0x91, 0xB1, 0xB1, 0x8D, 0x8D, 0x8D, 0x8D, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
0xDB};

const unsigned PROGMEM char LEAK_ICON[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB7, 0xDB, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x93, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB7, 0x97, 0x92, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x72, 0x9B, 0x73, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x97, 0xBB, 0x77, 0x72, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x6E, 0x97, 0x97, 0x53, 0x4E, 0xB7, 0xFF, 0xFF, 0xFF, 0xDB, 0x4E, 0x53, 0x2E, 0x53, 0x4E, 0xB6, 0xFF,
0xFF, 0xFF, 0xFF, 0x6E, 0x53, 0x73, 0x53, 0x4E, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x72, 0x92, 0x72, 0xB6, 0xFF, 0xFF,
0xFF};

const unsigned PROGMEM char LIGHTS_ICON[] = {
0xFF, 0xFF, 0xFF, 0xD6, 0xD2, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xDA, 0xDA, 0xD5, 0xD6, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xB1, 0xDA, 0xD9, 0xD9, 0xB1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0xB5, 0xD9, 0xD5, 0xB2, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xDA, 0xB1, 0xD9, 0x91, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8D, 0xDA, 0x8D, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0x92, 0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x92, 0xB6, 0x6D, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xB6, 0x49, 0x92, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0xFF,
0xFF};

const unsigned PROGMEM char BAR_CENTER[] = {
0x92, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xB6, 0xB6, 0xB6, 0xB6};

const unsigned PROGMEM char BAR_D_LEFT[] = {
0xEC, 0xEC, 0xF1, 0xF5, 0xFA, 0xFA};

const unsigned PROGMEM char BAR_D_RIGHT[] = {
0xF5, 0xF6, 0xFA, 0xFA, 0xFB, 0xFF};

const unsigned PROGMEM char BAR_RB_LEFT[] = {
0x29, 0x29, 0x2A, 0x72, 0x72, 0x96};

const unsigned PROGMEM char BAR_RB_RIGHT[] = {
0x6E, 0x92, 0x96, 0xDB, 0xDB, 0xDB};

const unsigned PROGMEM char BAR_R_LEFT[] = {
0xE9, 0xE9, 0xED, 0xF2, 0xF6, 0xFB};

const unsigned PROGMEM char BAR_R_RIGHT[] = {
0xF2, 0xF6, 0xFA, 0xFB, 0xFB, 0xFF};

const unsigned PROGMEM char BAR_G_LEFT[] = {
0x2C, 0x4D, 0x51, 0x76, 0x96, 0x9A};

const unsigned PROGMEM char BAR_G_RIGHT[] = {
0x95, 0x96, 0xBA, 0xDB, 0xDF, 0xDF};

const unsigned PROGMEM char BAR_B_LEFT[] = {
0x97, 0x97, 0x97, 0xBB, 0xDB, 0xDF};

const unsigned PROGMEM char BAR_B_RIGHT[] = {
0xBB, 0xBF, 0xDF, 0xDF, 0xDF, 0xFF};

const unsigned PROGMEM char BAR_I_LEFT[] = {
0xAB, 0xAB, 0xAF, 0xD3, 0xD7, 0xFB};

const unsigned PROGMEM char BAR_I_RIGHT[] = {
0xB7, 0xB7, 0xB7, 0xDB, 0xDB, 0xDB};

enum ScreenItem {
	PARAMS_2014,
#if defined DisplayLEDPWM && !defined REEFANGEL_MINI
	DIMMING_2014,
#endif // DisplayLEDPWM
	INPUT_2014,
	RELAY_2014,
#ifdef RelayExp
	RELAY1_2014,
	RELAY2_2014,
	RELAY3_2014,
	RELAY4_2014,
	RELAY5_2014,
	RELAY6_2014,
	RELAY7_2014,
	RELAY8_2014,
#endif // RelayExp
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
	WL_2014,
#endif // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef PWMEXPANSION
	DIMMING_E_2014,
#endif // PWMEXPANSION
#ifdef IOEXPANSION
	IO_2014,
#endif // IOEXPANSION
#ifdef AI_LED
	AI_2014,
#endif // AI_LED
#ifdef RFEXPANSION
#ifdef RADION_COMM
	RF_RADION_2014,
#endif // RADION_COMM
	RF_2014,
#endif // RFEXPANSION
#ifdef DCPUMPCONTROL
	DCPUMP_2014,
#endif // DCPUMPCONTROL
#ifdef CUSTOM_VARIABLES
	CUSTOMVAR_2014,
#endif // CUSTOM_VARIABLES
	ALERT_FLAGS_2014,
	STATUS_FLAGS_2014
};

void ReefAngelClass::InitCustomLabels()
{
	for (int a=1;a<=8;a++)
		CustomLabels[a-1]=String("Port " + String(a));
#ifdef RelayExp
	for (int a=1;a<=MAX_RELAY_EXPANSION_MODULES;a++)
		for (int b=1;b<=8;b++)
			CustomLabels[(a*8)+b-1]=String("Port "+ String(a) + String(b));
#endif // RelayExp
}

void ReefAngelClass::Draw2014Main()
{
	const byte x1[]={0,45,89};
	const byte x2[]={43,87,131};
	const byte x3[]={22,66,110};
	char text[7];
	byte offset;
	byte x,y,w;
	char buf[16];
	String PUMP_MODES[] = {"Constant","Lagoon","ReefCrest","Short Pulse","Long Pulse","Nutrient Trans.","Tidal Swell","Feeding","","Night","Custom"};
	byte PUMP_COLORS[] = {COLOR_DARKGREEN,COLOR_DARKGOLDENROD,COLOR_DARKGOLDENROD,COLOR_NAVY,COLOR_MEDIUMPURPLE,COLOR_HOTPINK,COLOR_HOTPINK,COLOR_SLATEGREY,COLOR_SLATEGREY,COLOR_INDIANRED};

	if (Joystick.IsLeft())
	{
		if (--MenuItem_2014>STATUS_FLAGS_2014) MenuItem_2014=STATUS_FLAGS_2014;
#ifndef RA_PLUS
		if (MenuItem_2014==RELAY_2014) MenuItem_2014--;
#endif
#ifdef RelayExp
		if (MenuItem_2014>=RELAY1_2014 && MenuItem_2014<=RELAY8_2014)
			for (int a=MenuItem_2014-RELAY1_2014;a>=0;a--)
				if (bitRead(REM,a))
					break;
				else
					MenuItem_2014--;
#endif
		redrawmenu=true;
		// Turn backlight on
		LCD.BacklightOn();
		Timer[LCD_TIMER].Start();
	}
	if (Joystick.IsRight())
	{
		if (++MenuItem_2014>STATUS_FLAGS_2014) MenuItem_2014=PARAMS_2014;
#ifndef RA_PLUS
		if (MenuItem_2014==RELAY_2014) MenuItem_2014++;
#endif
#ifdef RelayExp
		if (MenuItem_2014>=RELAY1_2014 && MenuItem_2014<=RELAY8_2014)
			for (int a=MenuItem_2014-RELAY1_2014;a<MAX_RELAY_EXPANSION_MODULES;a++)
				if (bitRead(REM,a))
					break;
				else
					MenuItem_2014++;
#endif
		redrawmenu=true;
		// Turn backlight on
		LCD.BacklightOn();
		Timer[LCD_TIMER].Start();
	}
	if (redrawmenu)
	{
		redrawmenu=false;
		LCD.Clear(DefaultBGColor,0,0,131,105);
		switch (MenuItem_2014)
		{
		case PARAMS_2014:
			LCD.Clear(T1TempColor,0,0,43,13);
			LCD.Clear(T2TempColor,45,0,87,13);
			LCD.Clear(T3TempColor,89,0,131,13);
			LCD.Clear(PHColor,0,26,43,39);
			LCD.Clear(COLOR_DIMGREY,45,26,87,39);
			LCD.Clear(COLOR_DIMGREY,89,26,131,39);
			LCD.DrawLargeText(COLOR_WHITE,T1TempColor,15,4,"T1");
			LCD.DrawLargeText(COLOR_WHITE,T2TempColor,58,4,"T2");
			LCD.DrawLargeText(COLOR_WHITE,T3TempColor,101,4,"T3");
			LCD.DrawLargeText(COLOR_WHITE,PHColor,15,30,"pH");
			x=1;
			y=26;
//#if defined DisplayLEDPWM && !defined REEFANGEL_MINI
//			LCD.Clear(APColor,x1[x],y,x2[x],y+13);
//			LCD.DrawLargeText(COLOR_WHITE,APColor,x1[x]+15,y+4,"AP");
//			CheckOffset(x,y);
//			LCD.Clear(DPColor,x1[x],y,x2[x],y+13);
//			LCD.DrawLargeText(COLOR_WHITE,DPColor,x1[x]+15,y+4,"DP");
//			CheckOffset(x,y);
//#endif // DisplayLEDPWM
//#ifdef RA_STAR
//			LCD.Clear(APColor,x1[x],y,x2[x],y+13);
//			LCD.DrawLargeText(COLOR_WHITE,APColor,x1[x]+12,y+4,"AP2");
//			CheckOffset(x,y);
//			LCD.Clear(DPColor,x1[x],y,x2[x],y+13);
//			LCD.DrawLargeText(COLOR_WHITE,DPColor,x1[x]+12,y+4,"DP2");
//			CheckOffset(x,y);
//#endif // RA_STAR
#if defined SALINITYEXPANSION
			LCD.Clear(COLOR_DARKSLATEGREY,x1[x],y,x2[x],y+13);
			LCD.DrawLargeText(COLOR_WHITE,COLOR_DARKSLATEGREY,x1[x]+12,y+4,"SAL");
			CheckOffset(x,y);
#endif // SALINITYEXPANSION
#if defined ORPEXPANSION
			LCD.Clear(COLOR_SADDLEBROWN,x1[x],y,x2[x],y+13);
			LCD.DrawLargeText(COLOR_WHITE,COLOR_SADDLEBROWN,x1[x]+12,y+4,"ORP");
			CheckOffset(x,y);
#endif // ORPEXPANSION
#if defined PHEXPANSION
			LCD.Clear(COLOR_DARKGREEN,x1[x],y,x2[x],y+13);
			LCD.DrawLargeText(COLOR_WHITE,COLOR_DARKGREEN,x1[x]+12,y+4,"pHE");
			CheckOffset(x,y);
#endif // PHEXPANSION
#if defined HUMIDITYEXPANSION
			LCD.Clear(COLOR_PLUM,x1[x],y,x2[x],y+13);
			LCD.DrawLargeText(COLOR_WHITE,COLOR_PLUM,x1[x]+12,y+4,"HUM");
			CheckOffset(x,y);
#endif // HUMIDITYEXPANSION
#if defined PAREXPANSION
			LCD.Clear(COLOR_DODGERBLUE,x1[x],y,x2[x],y+13);
			LCD.DrawLargeText(COLOR_WHITE,COLOR_DODGERBLUE,x1[x]+12,y+4,"PAR");
			CheckOffset(x,y);
#endif // PAREXPANSION
			break;
#if defined DisplayLEDPWM && !defined REEFANGEL_MINI
		case DIMMING_2014:
			x=5;
			y=5;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,37,y,"Dimming");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Daylight");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Actinic");
			y+=20;
#ifdef RA_STAR
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Daylight 2");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Actinic 2");
			y+=20;
#endif // RA_STAR
			break;
#endif // DisplayLEDPWM
		case INPUT_2014:
			x=25;
			y=5;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,47,y,"Input");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"ATO Low");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"ATO High");
			y+=20;
#ifdef RA_STAR
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Alarm");
			y+=20;
#endif // RA_STAR
#ifdef LEAKDETECTOREXPANSION
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Water Leak");
#endif // LEAKDETECTOREXPANSION
			break;
		case RELAY_2014:
#ifdef RelayExp
		case RELAY1_2014:
		case RELAY2_2014:
		case RELAY3_2014:
		case RELAY4_2014:
		case RELAY5_2014:
		case RELAY6_2014:
		case RELAY7_2014:
		case RELAY8_2014:
#endif // RelayExp
			x=52;
			y=5;
			for (int a=0+(MenuItem_2014-RELAY_2014)*8;a<8+(MenuItem_2014-RELAY_2014)*8;a++)
			{
				char buf[16];
				CustomLabels[a].toCharArray(buf,16);
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,buf);
				LCD.DrawImage(35,12,0,y-2,RELAY_BAR);
				y+=12;
			}
			break;
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
		case WL_2014:
		{
			x=5;
			y=5;
#if defined MULTIWATERLEVELEXPANSION && !defined WATERLEVELEXPANSION
      int a=1;
#else
      int a=0;
#endif
			for (a; a < WATERLEVEL_CHANNELS; a++)
			{
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"WL Ch");
				ConvertNumToString(text, a, 1);
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,52,y,text);
				y+=19;
			}
			break;
		}
#endif // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef PWMEXPANSION
		case DIMMING_E_2014:
			x=5;
			y=5;
			for (int a=0; a<PWM_EXPANSION_CHANNELS; a++)
			{
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Dimming Ch");
				ConvertNumToString(text, a, 1);
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,92,y,text);
				y+=17;
			}
			break;
#endif // PWMEXPANSION
#ifdef IOEXPANSION
		case IO_2014:
			x=25;
			y=5;
			for (int a=0; a<IO_EXPANSION_CHANNELS; a++)
			{
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"I/O Ch");
				ConvertNumToString(text, a, 1);
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,80,y,text);
				y+=17;
			}
			break;
#endif // IOEXPANSION
#ifdef AI_LED
		case AI_2014:
			x=5;
			y=15;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"White");
			y+=25;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Blue");
			y+=25;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Royal Blue");
			y+=25;
			break;
#endif // AI_LED
#ifdef RFEXPANSION
#ifdef RADION_COMM
		case RF_RADION_2014:
			x=5;
			y=5;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"White");
			y+=17;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Royal Blue");
			y+=17;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Red");
			y+=17;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Green");
			y+=17;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Blue");
			y+=17;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Intensity");
			y+=17;
			break;
#endif // RADION_COMM
		case RF_2014:
			x=5;
			y=5;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,40,y,"Vortech");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Mode");
			y+=25;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Duration");
			y+=25;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Speed");
			break;
#endif // RFEXPANSION
#ifdef DCPUMPCONTROL
		case DCPUMP_2014:
			x=5;
			y=5;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,40,y,"DC Pump");
			y+=20;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Mode");
			y+=25;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Duration");
			y+=25;
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Speed");
			break;
#endif // DCPUMPCONTROL
#ifdef CUSTOM_VARIABLES
		case CUSTOMVAR_2014:
			x=15;
			y=5;
			for (int a=0; a<8; a++)
			{
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,"Var");
				ConvertNumToString(text, a, 1);
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,48,y,text);
				y+=12;
			}
			break;
#endif // CUSTOM_VARIABLES
		case ALERT_FLAGS_2014:
			x=25;
			y=5;
			if (AlertFlags==0)
			{
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,30,15,"No Alerts");
				LCD.DrawImage(46,40,42,42,NO_ALERTS);
			}
			else
			{
				if (isATOTimeOut())
				{
					LCD.DrawImage(10,10,10,y,ATO_TIMEOUT_ICON);
					LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y+1,"ATO Timeout");
					y+=12;
				}
				if (isOverheat())
				{
					LCD.DrawImage(10,10,10,y,OVERHEAT_ICON);
					LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y+1,"Overheat");
					y+=12;
				}
				#ifdef BUSCHECK
				if (isBusLock())
				{
					LCD.DrawImage(10,10,10,y,BUSLOCK_ICON);
					LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y+1,"Bus Lock");
					y+=12;
				}
				#endif // BUSCHECK
				#ifdef LEAKDETECTOREXPANSION
				if (isLeak())
				{
					LCD.DrawImage(10,10,10,y,LEAK_ICON);
					LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y+1,"Leak");
					y+=12;
				}
				#endif // LEAKDETECTOREXPANSION
			}
			break;

		case STATUS_FLAGS_2014:
			x=25;
			y=5;
			if (StatusFlags==0)
			{
				LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,25,15,"Normal Mode");
				LCD.DrawImage(48,48,42,42,NO_STATUS);
			}
			else
			{
				if (bitRead(StatusFlags,LightsOnFlag))
				{
					LCD.DrawImage(10,10,10,y,LIGHTS_ICON);
					LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y+1,"Lights On");
					y+=12;
				}
			}
			break;
		}
		LCD.DrawImage(15,13,10,115,ARROW_LEFT);
		LCD.DrawImage(49,9,40,118,RA_WING);
		LCD.DrawImage(15,13,105,115,ARROW_RIGHT);
	}

	switch (MenuItem_2014)
	{
	case PARAMS_2014:
//		offset=intlength(Params.Temp[T1_PROBE])+1;
//		ConvertNumToString(text, Params.Temp[T1_PROBE], 10);
//		LCD.DrawText(T1TempColor,DefaultBGColor, 19-(offset*2),16,text);
//		offset=intlength(Params.Temp[T2_PROBE])+1;
//		ConvertNumToString(text, Params.Temp[T2_PROBE], 10);
//		LCD.DrawText(T2TempColor,DefaultBGColor, 64-(offset*2),16,text);
//		offset=intlength(Params.Temp[T3_PROBE])+1;
//		ConvertNumToString(text, Params.Temp[T3_PROBE], 10);
//		LCD.DrawText(T3TempColor,DefaultBGColor, 108-(offset*2),16,text);
//		offset=intlength(Params.PH)+1;
//		ConvertNumToString(text, Params.PH, 100);
//		LCD.DrawText(PHColor,DefaultBGColor, 20-(offset*2),42,text);
		LCD.DrawCenterSingleMonitor(Params.Temp[T1_PROBE],T1TempColor,22,16,10,1);
		LCD.DrawCenterSingleMonitor(Params.Temp[T2_PROBE],T2TempColor,66,16,10,1);
		LCD.DrawCenterSingleMonitor(Params.Temp[T3_PROBE],T3TempColor,110,16,10,1);
		LCD.DrawCenterSingleMonitor(Params.PH,PHColor,22,42,100,1);
		x=1;
		y=42;
//#if defined DisplayLEDPWM && !defined REEFANGEL_MINI
//		offset=intlength(PWM.GetActinicValue())+1;
//		ConvertNumToString(text, PWM.GetActinicValue(), 1);
//		LCD.DrawText(APColor,DefaultBGColor, x1[x]+19-(offset*2),y,text);
//		CheckOffset(x,y);
//		offset=intlength(PWM.GetDaylightValue())+1;
//		ConvertNumToString(text, PWM.GetDaylightValue(), 1);
//		LCD.DrawText(DPColor,DefaultBGColor, x1[x]+19-(offset*2),y,text);
//		CheckOffset(x,y);
//#endif // DisplayLEDPWM
//#ifdef RA_STAR
//		offset=intlength(PWM.GetActinic2Value())+1;
//		ConvertNumToString(text, PWM.GetActinic2Value(), 1);
//		LCD.DrawText(APColor,DefaultBGColor, x1[x]+19-(offset*2),y,text);
//		CheckOffset(x,y);
//		offset=intlength(PWM.GetDaylight2Value())+1;
//		ConvertNumToString(text, PWM.GetDaylight2Value(), 1);
//		LCD.DrawText(DPColor,DefaultBGColor, x1[x]+19-(offset*2),y,text);
//		CheckOffset(x,y);
//#endif // RA_STAR
#if defined SALINITYEXPANSION
		LCD.DrawCenterSingleMonitor(Params.Salinity,COLOR_DARKSLATEGREY,x3[x],y,10,1);
		CheckOffset(x,y);
#endif // SALINITYEXPANSION
#if defined ORPEXPANSION
		LCD.DrawCenterSingleMonitor(Params.ORP,COLOR_SADDLEBROWN,x3[x],y,1,1);
		CheckOffset(x,y);
#endif // ORPEXPANSION
#if defined PHEXPANSION
		LCD.DrawCenterSingleMonitor(Params.PHExp,COLOR_DARKGREEN,x3[x],y,100,1);
		CheckOffset(x,y);
#endif // PHEXPANSION
#if defined HUMIDITYEXPANSION
		LCD.DrawCenterSingleMonitor(Humidity.GetLevel(),COLOR_PLUM,x3[x],y,10,1);
		CheckOffset(x,y);
#endif // HUMIDITYEXPANSION
#if defined PAREXPANSION
		LCD.DrawCenterSingleMonitor(PAR.GetLevel(),COLOR_DODGERBLUE,x3[x],y,1,1);
		CheckOffset(x,y);
#endif // PAREXPANSION
		break;
#if defined DisplayLEDPWM && !defined REEFANGEL_MINI
	case DIMMING_2014:
		x=5;
		y=31;
		byte d1,a1;
		d1=PWM.GetDaylightValue();
		a1=PWM.GetActinicValue();
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,d1);
		for(int b=0; b<d1; b++)
			LCD.DrawImage(1,6,b+5,y+2,BAR_D_LEFT);
		LCD.DrawImage(2,6,d1+5,y+2,BAR_CENTER);
		for(int b=d1; b<100; b++)
			LCD.DrawImage(1,6,b+7,y+2,BAR_D_RIGHT);
		y+=20;
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,a1);
		for(int b=0; b<a1; b++)
			LCD.DrawImage(1,6,b+5,y+2,BAR_RB_LEFT);
		LCD.DrawImage(2,6,a1+5,y+2,BAR_CENTER);
		for(int b=a1; b<100; b++)
			LCD.DrawImage(1,6,b+7,y+2,BAR_RB_RIGHT);
		y+=20;
#ifdef RA_STAR
		byte d2,a2;
		d2=PWM.GetDaylight2Value();
		a2=PWM.GetActinic2Value();
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,d2);
		for(int b=0; b<d2; b++)
			LCD.DrawImage(1,6,b+5,y+2,BAR_D_LEFT);
		LCD.DrawImage(2,6,d2+5,y+2,BAR_CENTER);
		for(int b=d2; b<100; b++)
			LCD.DrawImage(1,6,b+7,y+2,BAR_D_RIGHT);
		y+=20;
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,a2);
		for(int b=0; b<a2; b++)
			LCD.DrawImage(1,6,b+5,y+2,BAR_RB_LEFT);
		LCD.DrawImage(2,6,a2+5,y+2,BAR_CENTER);
		for(int b=a2; b<100; b++)
			LCD.DrawImage(1,6,b+7,y+2,BAR_RB_RIGHT);
		y+=20;
#endif // RA_STAR
		break;
#endif // DisplayLEDPWM
	case INPUT_2014:
		x=8;
		y=25;
		LCD.DrawImage(8,8,x,y,LowATO.IsActive()?ATO_GREEN:ATO_RED);
		y+=20;
		LCD.DrawImage(8,8,x,y,HighATO.IsActive()?ATO_GREEN:ATO_RED);
		y+=20;
#ifdef RA_STAR
		LCD.DrawImage(8,8,x,y,AlarmInput.IsActive()?ATO_GREEN:ATO_RED);
		y+=20;
#endif // RA_STAR
#ifdef LEAKDETECTOREXPANSION
		LCD.DrawImage(8,8,x,y,IsLeakDetected()?ATO_GREEN:ATO_RED);
#endif // LEAKDETECTOREXPANSION
		break;
	case RELAY_2014:
#ifdef RelayExp
	case RELAY1_2014:
	case RELAY2_2014:
	case RELAY3_2014:
	case RELAY4_2014:
	case RELAY5_2014:
	case RELAY6_2014:
	case RELAY7_2014:
	case RELAY8_2014:
#endif // RelayExp
		x=52;
		y=5;
		for (int a=0+(MenuItem_2014-RELAY_2014)*10;a<8+(MenuItem_2014-RELAY_2014)*10;a++)
		{
			if (Relay.isMaskOn(a+1)) LCD.DrawImage(22,6,7,y+1,RELAY_ON);
			else if (Relay.isMaskOff(a+1)) LCD.DrawImage(22,6,7,y+1,RELAY_OFF);
			else LCD.DrawImage(22,6,7,y+1,RELAY_AUTO);
			LCD.DrawImage(13,12,35,y-2,Relay.Status(a+1)?RELAY_GREEN:RELAY_RED);
			y+=12;
		}
		break;
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
	case WL_2014: {
		x=5;
		y=13;
#if defined MULTIWATERLEVELEXPANSION && !defined WATERLEVELEXPANSION
		int a=1;
#else
		int a=0;
#endif
		for (a; a < WATERLEVEL_CHANNELS; a++)
		{
			byte w = WaterLevel.GetLevel(a);
			LCD.DrawText(COLOR_BLACK, DefaultBGColor, 110, y, "   ");
			LCD.DrawText(COLOR_BLACK, DefaultBGColor, 110, y, w);
			if(w > 100) w = 100;
			for(int b=0; b < w; b++)
			{
				LCD.DrawImage(1, 6, b + 5, y + 2, BAR_RB_LEFT);
			}
			LCD.DrawImage(2, 6, w + 5, y + 2, BAR_CENTER);
			for(int b = w; b < 100; b++)
			{
				LCD.DrawImage(1, 6, b + 7, y + 2, BAR_RB_RIGHT);
			}
			y+=19;
		}
		break;
	}
#endif // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#ifdef PWMEXPANSION
	case DIMMING_E_2014:
		x=5;
		y=11;
		for (int a=0; a<PWM_EXPANSION_CHANNELS; a++)
		{
			byte w=PWM.GetChannelValue(a);
			LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
			LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,w);
			for(int b=0; b<w; b++)
				LCD.DrawImage(1,6,b+5,y+2,BAR_G_LEFT);
			LCD.DrawImage(2,6,w+5,y+2,BAR_CENTER);
			for(int b=w; b<100; b++)
				LCD.DrawImage(1,6,b+7,y+2,BAR_G_RIGHT);

			y+=17;
		}
		break;
#endif // PWMEXPANSION
#ifdef IOEXPANSION
	case IO_2014:
		x=8;
		y=5;
		for (int a=0; a<IO_EXPANSION_CHANNELS; a++)
		{
			LCD.DrawImage(8,8,x,y,IO.GetChannel(a)?ATO_RED:ATO_GREEN);
			y+=17;
		}
		break;
#endif // IOEXPANSION
#ifdef AI_LED
	case AI_2014:
		x=5;
		y=21;

		for (int a=0; a<AI_CHANNELS; a++)
		{
			byte w=AI.GetChannel(a);
			LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
			LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,w);
			for(int b=0; b<w; b++)
				if (a==0)
					LCD.DrawImage(1,6,b+5,y+2,BAR_D_LEFT);
				else if (a==1)
					LCD.DrawImage(1,6,b+5,y+2,BAR_B_LEFT);
				else
					LCD.DrawImage(1,6,b+5,y+2,BAR_RB_LEFT);
			LCD.DrawImage(2,6,w+5,y+2,BAR_CENTER);
			for(int b=w; b<100; b++)
				if (a==0)
					LCD.DrawImage(1,6,b+7,y+2,BAR_D_RIGHT);
				else if (a==1)
					LCD.DrawImage(1,6,b+7,y+2,BAR_B_RIGHT);
				else
					LCD.DrawImage(1,6,b+7,y+2,BAR_RB_RIGHT);
			y+=25;
		}
		break;
#endif // AI_LED
#ifdef RFEXPANSION
#ifdef RADION_COMM
	case RF_RADION_2014:
		x=5;
		y=11;

		for (int a=0; a<RF_CHANNELS; a++)
		{
			byte w=RF.GetChannel(a);
			LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
			LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,w);
			for(int b=0; b<w; b++)
				if (a==0)
					LCD.DrawImage(1,6,b+5,y+2,BAR_D_LEFT);
				else if (a==1)
					LCD.DrawImage(1,6,b+5,y+2,BAR_RB_LEFT);
				else if (a==2)
					LCD.DrawImage(1,6,b+5,y+2,BAR_R_LEFT);
				else if (a==3)
					LCD.DrawImage(1,6,b+5,y+2,BAR_G_LEFT);
				else if (a==4)
					LCD.DrawImage(1,6,b+5,y+2,BAR_B_LEFT);
				else
					LCD.DrawImage(1,6,b+5,y+2,BAR_I_LEFT);
			LCD.DrawImage(2,6,w+5,y+2,BAR_CENTER);
			for(int b=w; b<100; b++)
				if (a==0)
					LCD.DrawImage(1,6,b+7,y+2,BAR_D_RIGHT);
				else if (a==1)
					LCD.DrawImage(1,6,b+7,y+2,BAR_RB_RIGHT);
				else if (a==2)
					LCD.DrawImage(1,6,b+7,y+2,BAR_R_RIGHT);
				else if (a==3)
					LCD.DrawImage(1,6,b+7,y+2,BAR_G_RIGHT);
				else if (a==4)
					LCD.DrawImage(1,6,b+7,y+2,BAR_B_RIGHT);
				else
					LCD.DrawImage(1,6,b+7,y+2,BAR_I_RIGHT);
			y+=17;
		}
		break;
#endif // RADION_COMM
	case RF_2014:
		x=5;
		y=33;
		PUMP_MODES[RF.Mode].toCharArray(buf,16);
		LCD.DrawLargeText(PUMP_COLORS[RF.Mode],COLOR_WHITE,x,y,buf);
		LCD.Clear(DefaultBGColor,(PUMP_MODES[RF.Mode].length()*8)+5,y,131,y+7);
		y+=25;
		ConvertNumToString(text, RF.Duration, 1);
		LCD.DrawLargeText(PUMP_COLORS[RF.Mode],COLOR_WHITE,x,y,text);
		y+=25;
		w=RF.Speed;
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,w);
		for(int b=0; b<w; b++)
			LCD.DrawImage(1,6,b+5,y+2,BAR_I_LEFT);
		LCD.DrawImage(2,6,w+5,y+2,BAR_CENTER);
		for(int b=w; b<100; b++)
			LCD.DrawImage(1,6,b+7,y+2,BAR_I_RIGHT);
		y+=17;
		break;
#endif // RFEXPANSION
#ifdef DCPUMPCONTROL
	case DCPUMP_2014:
		x=5;
		y=33;
		PUMP_MODES[DCPump.Mode].toCharArray(buf,16);
		LCD.DrawLargeText(PUMP_COLORS[DCPump.Mode],COLOR_WHITE,x,y,buf);
		LCD.Clear(DefaultBGColor,(PUMP_MODES[DCPump.Mode].length()*8)+5,y,131,y+7);
		y+=25;
		ConvertNumToString(text, DCPump.Duration, 1);
		LCD.DrawLargeText(PUMP_COLORS[DCPump.Mode],COLOR_WHITE,x,y,text);
		y+=25;
		w=DCPump.Speed;
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,"   ");
		LCD.DrawText(COLOR_BLACK,DefaultBGColor, 110,y,w);
		for(int b=0; b<w; b++)
			LCD.DrawImage(1,6,b+5,y+2,BAR_I_LEFT);
		LCD.DrawImage(2,6,w+5,y+2,BAR_CENTER);
		for(int b=w; b<100; b++)
			LCD.DrawImage(1,6,b+7,y+2,BAR_I_RIGHT);
		y+=17;
		break;
#endif // DCPUMPCONTROL
#ifdef CUSTOM_VARIABLES
	case CUSTOMVAR_2014:
		x=90;
		y=5;
		for (int a=0; a<8; a++)
		{
			ConvertNumToString(text, CustomVar[a], 1);
			LCD.DrawLargeText(COLOR_BLACK,COLOR_WHITE,x,y,text);
			y+=12;
		}
		break;
#endif // CUSTOM_VARIABLES
	}
#ifdef DATETIME24
	LCD.DrawDateTimeISO8601(6, 107);
#else
	LCD.DrawDate(6, 107);
#endif // DATETIME24
}
#endif // MAIN_2014

void ReefAngelClass::DrawStandardMain()
{
	// display everything on the home screen except the graph
	// the graph is drawn/updated when we exit the main menu & when the parameters are saved
#ifdef DATETIME24
	LCD.DrawDateTimeISO8601(6, 112);
#else
	LCD.DrawDate(6, 112);
#endif // DATETIME24
#if defined DisplayLEDPWM && ! defined RemoveAllLights
	LCD.DrawMonitor(15, 60, Params, PWM.GetDaylightValue(), PWM.GetActinicValue());
#else  // defined DisplayLEDPWM && ! defined RemoveAllLights
	LCD.DrawMonitor(15, 60, Params);
#endif  // defined DisplayLEDPWM && ! defined RemoveAllLights

	byte TempRelay = Relay.RelayData;
	TempRelay &= Relay.RelayMaskOff;
	TempRelay |= Relay.RelayMaskOn;
	LCD.DrawOutletBox(12, 93, TempRelay);
}

void ReefAngelClass::StoreGraphData()
{
	// Process any checks/tests/events that can happen while displaying the home screen
	// This can be the timers for wavemakers or any overheat temperatures

	// process timers
	// If bus is locked, it will trigger wdt when drawing graph
	if ( Timer[STORE_PARAMS_TIMER].IsTriggered() && !BusLocked) // Only access eeprom if bus is not locked
	{
		int CurTemp;

		// Values are stored in the I2CEEPROM1
		taddr++;
		if ( taddr >= 120 ) taddr = 0;
		Timer[STORE_PARAMS_TIMER].Start();
		CurTemp = map(Params.Temp[T1_PROBE], T1LOW, T1HIGH, 0, 50); // apply the calibration to the sensor reading
		CurTemp = constrain(CurTemp, 0, 50); // in case the sensor value is outside the range seen during calibration
		//LCD.PutPixel(DefaultBGColor,1,1);
		Memory.Write(taddr, CurTemp);
		LCD.PutPixel(DefaultBGColor,1,1);
		CurTemp = map(Params.Temp[T2_PROBE], T2LOW, T2HIGH, 0, 50); // apply the calibration to the sensor reading
		CurTemp = constrain(CurTemp, 0, 50); // in case the sensor value is outside the range seen during calibration
		LCD.PutPixel(DefaultBGColor,1,1);
		Memory.Write(taddr+120, CurTemp);
		LCD.PutPixel(DefaultBGColor,1,1);
		CurTemp = map(Params.Temp[T3_PROBE], T3LOW, T3HIGH, 0, 50); // apply the calibration to the sensor reading
		CurTemp = constrain(CurTemp, 0, 50); // in case the sensor value is outside the range seen during calibration
		//LCD.PutPixel(DefaultBGColor,1,1);
		Memory.Write(taddr+240, CurTemp);
		//					LCD.PutPixel(DefaultBGColor,1,1);
		CurTemp = map(Params.PH, PHLOW, PHHIGH, 0, 50); // apply the calibration to the sensor reading
		CurTemp = constrain(CurTemp, 0, 50); // in case the sensor value is outside the range seen during calibration
		//LCD.PutPixel(DefaultBGColor,1,1);
		Memory.Write(taddr+360, CurTemp);
		LCD.PutPixel(DefaultBGColor,1,1);
		if ((taddr%10)==0) InternalMemory.T1Pointer_write(taddr);
	#ifdef CUSTOM_MAIN
		DrawCustomGraph();
	#elif defined MAIN_2014
		// Don't draw anything
	#else
		LCD.DrawGraph(5, 5);
	#endif  // CUSTOM_MAIN
	}
}

void ReefAngelClass::DisplayFeedingMode()
{
	int t;
	bool bDone = false;
	t = Timer[FEEDING_TIMER].Trigger - now();
	if ( (t >= 0) && ! Timer[FEEDING_TIMER].IsTriggered() )
	{
		LCD.Clear(DefaultBGColor,60+(intlength(t)*5),100,100,108);
		LCD.DrawText(DefaultFGColor,DefaultBGColor,60,100,t);
		delay(200);  // to keep from redraw flicker on timer
	}
	else
	{
		bDone = true;
	}

	LastStart = now();  // Set the time normal mode is started
	if ( Joystick.IsButtonPressed() )
	{
		// joystick button pressed, so we stop the feeding mode
		bDone = true;
	}
	if ( bDone )
	{
		// turn on ports
		Relay.RelayMaskOff |= FeedingModePorts;
		// Compare the delayed on ports with the previous port states
		Relay.RelayData &= ~(FeedingModePorts & DelayedOnPorts);
#ifdef RelayExp
		for ( byte i = 0; i < MAX_RELAY_EXPANSION_MODULES; i++ )
		{
			Relay.RelayMaskOffE[i] |= FeedingModePortsE[i];
			Relay.RelayDataE[i] &= ~(FeedingModePortsE[i] & DelayedOnPortsE[i]);
		}
#endif  // RelayExp
#ifdef RFEXPANSION
		RF.SetMode(Feeding_Stop,0,0);
#endif  // RFEXPANSION
		ExitMenu();
	}
	//				Relay.Write();
}

void ReefAngelClass::DisplayWaterChangeMode()
{
	LastStart = now();  // Set the time normal mode is started
	if ( Joystick.IsButtonPressed() )
	{
		// turn on ports
		Relay.RelayMaskOff |= WaterChangePorts;
		// Compare the delayed on ports with the previous port states
		Relay.RelayData &= ~(WaterChangePorts & DelayedOnPorts);
#ifdef RelayExp
		for ( byte i = 0; i < MAX_RELAY_EXPANSION_MODULES; i++ )
		{
			Relay.RelayMaskOffE[i] |= WaterChangePortsE[i];
			Relay.RelayDataE[i] &= ~(WaterChangePortsE[i] & DelayedOnPortsE[i]);
		}
#endif  // RelayExp
		ExitMenu();
	}
	//				Relay.Write();
}

void ReefAngelClass::PrepMenuScreen()
{
	// Clears the screen to draw the menu
	// Displays main menu, select first item, save existing menu
	ClearScreen(DefaultBGColor);
	SelectedMenuItem = DEFAULT_MENU_ITEM;
	PreviousMenu = DEFAULT_MENU;
	SetDisplayedMenu(MAIN_MENU);
	showmenu = true;
	redrawmenu = true;
	menutimeout = now();
}

void ReefAngelClass::DisplayMenu()
{
	// redrawmenu should only get set from within this function when we move the joystick or press the button
	byte qty = menuqtysptr[DisplayedMenu];
	int ptr = menusptr[DisplayedMenu];
	byte PreviousSelectedMenuItem=SelectedMenuItem;
	if (redrawmenu) PreviousSelectedMenuItem=0;
	if ( Joystick.IsUp() )
	{
		// process UP press
		if ( (--SelectedMenuItem) > qty )
		{
			// we're moving up and we hit the top of the list
			// gotta wrap down to the bottom of the list
			// qty - 1 gives us the last item in our list
			//SelectedMenuItem = qty - 1;
			// This allows us to add in our last item
			SelectedMenuItem = qty;
		}
		redrawmenu = true;
		menutimeout = now();
	}

	if ( Joystick.IsDown() )
	{
		// process DOWN press
		// > allows for selection of last item, >= skips it
		if ( (++SelectedMenuItem) > qty )
		{
			// we've hit the bottom of the list
			// wrap around to the top of the list
			SelectedMenuItem = DEFAULT_MENU_ITEM;
		}
		redrawmenu = true;
		menutimeout = now();
	}

	// TODO Have ability to customize menu timeout delay
	if ( (now() - menutimeout) > MENU_TIMEOUT )
	{
		// menu timeout returns to the main screen
		// skip all the other menu checks
		SelectedMenuItem = EXCEED_TIMEOUT_MENU;
		SetDisplayedMenu(EXCEED_TIMEOUT_MENU);
		ButtonPress++;
	}

	if ( Joystick.IsButtonPressed() )
	{
		// button gets pressed, so we need to handle the button press
		ProcessButtonPress();
		redrawmenu = true;
#if defined WDT || defined WDT_FORCE
		wdt_reset();
#endif  // defined WDT || defined WDT_FORCE
		// Don't finish processing the rest of the menu
		return;
	}

	// don't redraw the menu if we don't have to
	if ( ! redrawmenu )
		return;

	byte i;
	byte bcolor, fcolor;
	char buffer[22];
	for ( i = 0; i <= qty; i++ )
	{
		bcolor = DefaultBGColor;
		fcolor = DefaultFGColor;
		if ( i < qty )
		{
			strcpy_P(buffer, (char *)ptr++);
		}
		else
		{
			// the last item in the list is either Exit or Prev Menu
			int ptr2 = pgm_read_word(&(return_items[0]));
			if ( DisplayedMenu == MainMenu )
			{
				ptr2 += strlen(Return_0_label) + 1;
			}
			strcpy_P(buffer, (char *)ptr2);
		}
		ptr += strlen(buffer);

		// change the background color on the selected menu entry
		if ( i == SelectedMenuItem )
		{
			bcolor = SelectionBGColor;
			fcolor = SelectionFGColor;
		}
		if (i==SelectedMenuItem || i==PreviousSelectedMenuItem || PreviousSelectedMenuItem==0)
		{
			LCD.Clear(bcolor, MENU_START_COL-3,
					(i*MENU_START_ROW)+MENU_HEADING_SIZE-1,
					MENU_END_COL,
					(i*MENU_START_ROW)+(MENU_HEADING_SIZE+MENU_ITEM_HEIGHT-1));
			LCD.DrawText(fcolor, bcolor, MENU_START_COL, (i*MENU_START_ROW)+MENU_HEADING_SIZE, buffer);
		}
	}  // for i
	// once drawn, no need to redraw yet
	redrawmenu = false;
}

void ReefAngelClass::DisplayMenuHeading()
{
	// NOTE do we redraw the menu heading or not?  use same logic as with the menu
	if ( ! redrawmenu )
		return;

	char buffer[10];
	int ptr = pgm_read_word(&(menulabel_items[0]));

	switch ( DisplayedMenu )
	{
	default:
		//            {
		//                //strcpy(buffer, "Menu:");
		//                sprintf(buffer, "Menu (%d):", MenuNum);
		//            }
		//            break;
	case MainMenu:
	{
		//                strcpy_P(buffer, (char*)ptr);
	}
	break;
#if !defined SIMPLE_MENU && !defined CUSTOM_MENU
	case SetupMenu:
	{
		ptr += strlen(Menu_0_label) + 1;
		//                strcpy_P(buffer, (char*)ptr);
	}
	break;
#ifndef RemoveAllLights
	case LightsMenu:
	{
		ptr += strlen(Menu_0_label) + strlen(Menu_1_label) + 2;
		//                strcpy_P(buffer, (char*)ptr);
	}
	break;
#endif  // RemoveAllLights
	case TempsMenu:
	{
		ptr += strlen(Menu_0_label) + strlen(Menu_1_label) + 2;
#ifndef RemoveAllLights
		ptr += strlen(Menu_2_label) + 1;
#endif  // RemoveAllLights
		//                strcpy_P(buffer, (char*)ptr);
	}
	break;
#if defined SetupExtras || defined ATOSetup
	case TimeoutsMenu:
	{
		ptr += strlen(Menu_0_label) + strlen(Menu_1_label) + strlen(Menu_3_label) + 3;
#ifndef RemoveAllLights
		ptr += strlen(Menu_2_label) + 1;
#endif  // RemoveAllLights
		//                strcpy_P(buffer, (char*)ptr);
	}
	break;
#endif  // if defined SetupExtras || defined ATOSetup
#endif  // !defined SIMPLE_MENU && !defined CUSTOM_MENU
	}  // switch MenuNum
	strcpy_P(buffer, (char*)ptr);

	// clear the line that has the menu heading on it
	LCD.Clear(DefaultBGColor, MENU_START_COL, MENU_START_ROW, MAX_X, MAX_Y);
	// Display the menu heading
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, buffer);
}

void ReefAngelClass::DisplayMenuEntry(char *text)
{
	ClearScreen(DefaultBGColor);
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, text);
	/*
    char buffer[18];
	int ptr = pgm_read_word(&(return_items[0]));
	ptr += strlen(Return_0_label) + strlen(Return_1_label) + 2;
	strcpy_P(buffer, (char *)ptr);
    LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*4, buffer);
	 */
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*4, "Press to exit...");
}

#ifdef CUSTOM_MENU
void ReefAngelClass::InitMenu(int ptr, byte qty)
{
	// loads all the menus
	menusptr[MainMenu] = ptr;
	menuqtysptr[MainMenu] = qty;
	// initialize menus
	PreviousMenu = DEFAULT_MENU;
	SetDisplayedMenu(DEFAULT_MENU);
	SelectedMenuItem = DEFAULT_MENU_ITEM;  // default item to have selected
	redrawmenu = true;
	showmenu = false;  // initially we are showing the main graphic and no menu
}
#else
void ReefAngelClass::InitMenus()
{
	// loads all the menus
	menusptr[MainMenu] = pgm_read_word(&(mainmenu_items[0]));
	menuqtysptr[MainMenu] = SIZE(mainmenu_items);

#ifndef SIMPLE_MENU
	menusptr[SetupMenu] = pgm_read_word(&(setupmenu_items[0]));
	menuqtysptr[SetupMenu] = SIZE(setupmenu_items);
#ifndef RemoveAllLights
	menusptr[LightsMenu] = pgm_read_word(&(lightsmenu_items[0]));
	menuqtysptr[LightsMenu] = SIZE(lightsmenu_items);
#endif  // RemoveAllLights
	menusptr[TempsMenu] = pgm_read_word(&(tempsmenu_items[0]));
	menuqtysptr[TempsMenu] = SIZE(tempsmenu_items);
#if defined SetupExtras || defined ATOSetup
	menusptr[TimeoutsMenu] = pgm_read_word(&(timeoutsmenu_items[0]));
	menuqtysptr[TimeoutsMenu] = SIZE(timeoutsmenu_items);
#endif  // if defined SetupExtras || defined ATOSetup
#endif  // SIMPLE_MENU

	// initialize menus
	PreviousMenu = DEFAULT_MENU;
	SetDisplayedMenu(DEFAULT_MENU);
	SelectedMenuItem = DEFAULT_MENU_ITEM;  // default item to have selected
	redrawmenu = true;
	showmenu = false;  // initially we are showing the main graphic and no menu
}
#endif  // CUSTOM_MENU

#ifdef VersionMenu
void ReefAngelClass::DisplayVersion()
{
	// Display the Software Version
	LCD.DrawText(ModeScreenColor,DefaultBGColor,10,10,"Reef Angel");
	LCD.DrawText(ModeScreenColor,DefaultBGColor,10,20,"v"ReefAngel_Version);
#ifdef wifi
	// Display wifi related information
	// Place holder information currently, need wifi module
	// to be able to write functions to retrieve actual information
	LCD.DrawText(ModeScreenColor,DefaultBGColor,10,30,"Wifi");
#endif  // wifi
#if defined WDT || defined WDT_FORCE
	LCD.DrawText(ModeScreenColor,DefaultBGColor,40,30,"WDT");
#endif
#ifdef RelayExp
	LCD.DrawText(ModeScreenColor,DefaultBGColor,10,40,InstalledRelayExpansionModules);
#endif  // RelayExp
#ifdef ETH_WIZ5100
	const byte* ipAddr=EthernetDHCP.ipAddress();
	char buf[20];
	sprintf(buf, "IP: %d.%d.%d.%d\0", ipAddr[0], ipAddr[1], ipAddr[2], ipAddr[3]);
	LCD.DrawText(ModeScreenColor,DefaultBGColor,10,50,buf);
#endif
}
#endif  // VersionMenu

void ReefAngelClass::ClearScreen(byte Color)
{
#if defined RA_TOUCH || defined RA_TOUCHDISPLAY
	TouchLCD.FullClear(BKCOLOR);
#else  // RA_TOUCH
	// clears the entire screen
	LCD.Clear(Color, 0, 0, 131, 131);
#endif  // RA_TOUCH
}

void ReefAngelClass::RefreshScreen()
{
	LCD.PutPixel(DefaultBGColor,1,1);
}


void ReefAngelClass::CheckScreenSaver()
{
	// process screensaver timeout
	if ( Timer[LCD_TIMER].IsTriggered() )
	{
		// Screensaver timeout expired
		LCD.BacklightOff();
	}

	if ( Joystick.IsButtonPressed() )
	{
		// turn the backlight on
		LCD.BacklightOn();

		// TODO check Timer[LCD_TIMER] code
		if ( Timer[LCD_TIMER].Trigger == 0 )
		{
			Timer[LCD_TIMER].Start();
			return;
		}
		PrepMenuScreen();
		// get out of this function and display the menu
		return;
	}
#ifdef MAIN_2014
	if ( Joystick.IsUp() || Joystick.IsDown() )
#else
	if ( Joystick.IsUp() || Joystick.IsDown() || Joystick.IsRight() || Joystick.IsLeft() )
#endif // MAIN_2014
	{
		// Turn backlight on
		LCD.BacklightOn();
		Timer[LCD_TIMER].Start();
	}
}


void ReefAngelClass::CheckDrawGraph()
{
	ClearScreen(DefaultBGColor);
	// If bus is locked, it will trigger wdt when drawing graph
	if(!BusLocked) // Only draw if bus is not locked
	{
#ifdef CUSTOM_MAIN
	DrawCustomGraph();
#elif defined MAIN_2014
	// Don't draw anything
#else
	LCD.DrawGraph(5, 5);
#endif  // CUSTOM_MAIN
	}
}

void ReefAngelClass::CheckFeedingDrawing()
{
	ClearScreen(DefaultBGColor);
	LCD.DrawText(ModeScreenColor, DefaultBGColor, 30, 10, "Feeding Mode");
#ifdef DisplayImages
	LCD.DrawEEPromImage(40,50, 40, 30, I2CEEPROM2, I2CEEPROM2_Feeding);
#endif  // DisplayImages
}

void ReefAngelClass::CheckWaterChangeDrawing()
{
	ClearScreen(DefaultBGColor);
	LCD.DrawText(ModeScreenColor, DefaultBGColor, 20, 10, "Water Change Mode");
#ifdef DisplayImages
	LCD.DrawEEPromImage(51,55, 40, 30, I2CEEPROM2, I2CEEPROM2_Water_Change);
#endif  // DisplayImages
}

void ReefAngelClass::ProcessButtonPress()
{
	bool bResetMenuTimeout = true;
	switch ( DisplayedMenu )
	{
	default:  // DEFAULT_MENU == 255
		//        {
		//            // Default Screen
		break;
		//        }
	case MainMenu:
	{
#ifdef CUSTOM_MENU
		ProcessButtonPressCustom();
		break;
	}
#else
	ProcessButtonPressMain();
	break;
	}

#ifndef SIMPLE_MENU
	case SetupMenu:
	{
		ProcessButtonPressSetup();
		break;
	}
#ifndef RemoveAllLights
	case LightsMenu:
	{
		ProcessButtonPressLights();
		break;
	}
#endif  // RemoveAllLights
	case TempsMenu:
	{
		ProcessButtonPressTemps();
		break;
	}
#if defined SetupExtras || defined ATOSetup
	case TimeoutsMenu:
	{
		ProcessButtonPressTimeouts();
		break;
	}
#endif  // if defined SetupExtras || defined ATOSetup
#endif  // SIMPLE_MENU
#endif  // CUSTOM_MENU

	case EXCEED_TIMEOUT_MENU:
	{
		// we bypass all the other menus when the timeout has exceeded
		// we need to mimic the default action for the main menu
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		showmenu = false;
		bResetMenuTimeout = false;
		// we are exiting the menu, so draw the graph
		ExitMenu();
		break;
	}
}
// if a button was pressed, we have to reset the timeout after processing the press
if ( bResetMenuTimeout )
{
	menutimeout = now();
}
}

#ifdef CUSTOM_MENU
void ReefAngelClass::ProcessButtonPressCustom()
{
	showmenu = false;
	ClearScreen(DefaultBGColor);
	switch ( SelectedMenuItem )
	{
	case CustomMenu_1:
	{
		MenuEntry1();
		break;
	}
#if CUSTOM_MENU_ENTRIES >= 2
	case CustomMenu_2:
	{
		MenuEntry2();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 2
#if CUSTOM_MENU_ENTRIES >= 3
	case CustomMenu_3:
	{
		MenuEntry3();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 3
#if CUSTOM_MENU_ENTRIES >= 4
	case CustomMenu_4:
	{
		MenuEntry4();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 4
#if CUSTOM_MENU_ENTRIES >= 5
	case CustomMenu_5:
	{
		MenuEntry5();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 5
#if CUSTOM_MENU_ENTRIES >= 6
	case CustomMenu_6:
	{
		MenuEntry6();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 6
#if CUSTOM_MENU_ENTRIES >= 7
	case CustomMenu_7:
	{
		MenuEntry7();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 7
#if CUSTOM_MENU_ENTRIES >= 8
	case CustomMenu_8:
	{
		MenuEntry8();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 8
#if CUSTOM_MENU_ENTRIES >= 9
	case CustomMenu_9:
	{
		MenuEntry9();
		break;
	}
#endif  // CUSTOM_MENU_ENTRIES >= 9
	default:
	{
		// This will be the EXIT choice
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		ExitMenu();
		break;
	}
	}
}

#else  // CUSTOM_MENU
void ReefAngelClass::ProcessButtonPressMain()
{
	showmenu = true;
	ClearScreen(DefaultBGColor);
	switch ( SelectedMenuItem )
	{
	case MainMenu_FeedingMode:
	{
		// run feeding mode
		FeedingModeStart();
		showmenu = false;
		break;
	}
	case MainMenu_WaterChangeMode:
	{
		WaterChangeModeStart();
		showmenu = false;
		break;
	}


#ifdef SIMPLE_MENU
	// Simplified menu
	case MainMenu_ATOClear:
	{
		ATOClear();
		DisplayMenuEntry("Clear ATO Timeout");
		showmenu = false;
		break;
	}
	case MainMenu_OverheatClear:
	{
		OverheatClear();
		DisplayMenuEntry("Clear Overheat");
		showmenu = false;
		break;
	}
	case MainMenu_PHCalibration:
	{
            StartSetupCalibrateChoicePH();
            break;
	}
#ifdef SALINITYEXPANSION
	case MainMenu_SalinityCalibration:
	{
		StartSetupCalibrateSalinity();
		break;
	}
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
	case MainMenu_ORPCalibration:
	{
		SetupCalibrateORP();
		break;
	}
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
	case MainMenu_PHExpCalibration:
	{
		StartSetupCalibrateChoicePHExp();
		break;
	}
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
	case MainMenu_WaterCalibration:
	{
		SetupCalibrateWaterLevel();
		break;
	}
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#if defined DateTimeSetup
	case MainMenu_DateTime:
	{
#ifdef DATETIME24
		StartSetupDateTime24();
#else
		StartSetupDateTime();
#endif //DATETIME24
		break;
	}
#endif  // DateTimeSetup

#else  // SIMPLE_MENU

	// Standard menus
#ifndef RemoveAllLights
	case MainMenu_Lights:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		PreviousMenu = DisplayedMenu;
		SetDisplayedMenu(LightsMenu);
		break;
	}
#endif  // RemoveAllLights
	case MainMenu_Temps:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		PreviousMenu = DisplayedMenu;
		SetDisplayedMenu(TempsMenu);
		break;
	}
#if defined SetupExtras || defined ATOSetup
	case MainMenu_Timeouts:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		PreviousMenu = DisplayedMenu;
		SetDisplayedMenu(TimeoutsMenu);
		break;
	}
#endif  // if defined SetupExtras || defined ATOSetup
	case MainMenu_Setup:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		PreviousMenu = DisplayedMenu;
		SetDisplayedMenu(SetupMenu);
		break;
	}
#endif  // SIMPLE_MENU

#ifdef LEAKDETECTOREXPANSION
	case MainMenu_LeakClear:
	{
		LeakClear();
		DisplayMenuEntry("Clear Leak");
		showmenu = false;
		break;
	}
#endif // LEAKDETECTOREXPANSION

#ifdef VersionMenu
	case MainMenu_Version:
	{
		DisplayVersion();
		// turn off the menu so we can wait for the button press to exit
		showmenu = false;
		break;
	}
#endif  // VersionMenu
	default:
	{
		// This will be the EXIT choice
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		// disable the menu, display main screen
		showmenu = false;
		// When we exit the main menu, we will redraw the graph
		ExitMenu();
		break;
	}
	}
}

#ifndef SIMPLE_MENU
void ReefAngelClass::ProcessButtonPressSetup()
{
	showmenu = true;
	ClearScreen(DefaultBGColor);
	switch ( SelectedMenuItem )
	{
#ifdef WavemakerSetup
	case SetupMenu_Wavemaker:
	{
		int v = InternalMemory.WM1Timer_read();
		int y = InternalMemory.WM2Timer_read();
		if ( SetupOption(v, y, 0, 21600, 5, "s", "", "Setup Wavemakers", "WM1:", "WM2:") )
		{
			InternalMemory.WM1Timer_write(v);
			InternalMemory.WM2Timer_write(y);
			//                Relay.On(WM1Port);
			//                Relay.On(WM2Port);
			//                Relay.Write();
		}
		break;
	}
#endif  // WavemakerSetup
#ifdef DosingPumpSetup
	case SetupMenu_DosingPump:
	{
		SetupDosingPump();
		break;
	}
#endif  // DosingPumpSetup
#ifdef DosingPumpIntervalSetup
	case SetupMenu_DosingPumpInterval:
	{
		int v = InternalMemory.DP1RepeatInterval_read();
		int y = InternalMemory.DP2RepeatInterval_read();
		if ( SetupOption(v, y, 1, 1440, 4, "m", "", "Repeat Interval", "DP1:", "DP2:") )
		{
			InternalMemory.DP1RepeatInterval_write(v);
			InternalMemory.DP2RepeatInterval_write(y);
		}
		v = InternalMemory.DP1Timer_read();
		y = InternalMemory.DP2Timer_read();
		if ( SetupOption(v, y, 1, 255, 3, "s", "", "Run Time", "DP1:", "DP2:") )
		{
			InternalMemory.DP1Timer_write(v);
			InternalMemory.DP2Timer_write(y);
		}
		break;
	}
#endif  // DosingPumpIntervalSetup
	case SetupMenu_CalibratePH:
	{
            StartSetupCalibrateChoicePH();
            break;
	}
#ifdef SALINITYEXPANSION
	case SetupMenu_CalibrateSalinity:
	{
		StartSetupCalibrateSalinity();
		break;
	}
#endif  // SALINITYEXPANSION
#ifdef ORPEXPANSION
	case SetupMenu_CalibrateORP:
	{
		SetupCalibrateORP();
		break;
	}
#endif  // ORPEXPANSION
#ifdef PHEXPANSION
	case SetupMenu_PHExpCalibration:
	{
		StartSetupCalibrateChoicePHExp();
		break;
	}
#endif  // PHEXPANSION
#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
	case SetupMenu_WaterCalibration:
	{
		SetupCalibrateWaterLevel();
		break;
	}
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION
#if defined DateTimeSetup
	case SetupMenu_DateTime:
	{
#ifdef DATETIME24
		StartSetupDateTime24();
#else
		StartSetupDateTime();
#endif
		break;
	}
#endif  // DateTimeSetup
	default:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		// switch to the previous menu
		SetDisplayedMenu(PreviousMenu);
		break;
	}
	}
}

#ifndef RemoveAllLights
void ReefAngelClass::ProcessButtonPressLights()
{
	showmenu = true;  // set to true when displaying setup screens
	ClearScreen(DefaultBGColor);
	switch ( SelectedMenuItem )
	{
	case LightsMenu_On:
	{
		LightsOn();
		DisplayMenuEntry("Lights On");
		showmenu = false;
		break;
	}
	case LightsMenu_Off:
	{
		LightsOff();
		DisplayMenuEntry("Restore Lights");
		showmenu = false;
		break;
	}
#ifdef MetalHalideSetup
	case LightsMenu_MetalHalides:
	{
		SetupLightsOptionDisplay(true);
		break;
	}
	case LightsMenu_MetalHalideDelay:
	{
		int v = InternalMemory.MHDelay_read();
		int y = -1;
		if ( SetupOption(v, y, 0, 255, 3, "m", "", "Setup MH Delay", "", "") )
		{
			InternalMemory.MHDelay_write((uint8_t)v);
		}
		break;
	}
#endif  // MetalHalideSetup
#ifdef StandardLightSetup
	case LightsMenu_StandardLights:
	{
		SetupLightsOptionDisplay(false);
		break;
	}
#endif  // StandardLightSetup
#if defined DisplayLEDPWM && !defined REEFANGEL_MINI
	case LightsMenu_LEDPWM:
	{
		int v = InternalMemory.LEDPWMActinic_read();
		int y = InternalMemory.LEDPWMDaylight_read();
		if ( SetupOption(v, y, 0, 100, 3, "%", "", "Setup LED", "AP:", "DP:") )
		{
			InternalMemory.LEDPWMActinic_write((uint8_t)v);
			InternalMemory.LEDPWMDaylight_write((uint8_t)y);
			// Restore PWM values
			PWM.SetActinic((uint8_t)v);
			PWM.SetDaylight((uint8_t)y);
		}
		break;
	}
#endif  // defined DisplayLEDPWM && !defined REEFANGEL_MINI
	default:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		// switch to the previous menu
		SetDisplayedMenu(PreviousMenu);
		break;
	}
	}
}
#endif  // RemoveAllLights

void ReefAngelClass::ProcessButtonPressTemps()
{
	showmenu = true;
	ClearScreen(DefaultBGColor);
	switch ( SelectedMenuItem )
	{
	case TempsMenu_Heater:
	{
		int v = InternalMemory.HeaterTempOn_read();
		int y = InternalMemory.HeaterTempOff_read();
		int min, max;
		char *s = "0";
		if ( TempSensor.unit )
		{
			min = DEGREE_C_LOW_TEMP;
			max = DEGREE_C_HIGH_TEMP;
			s = "C";
		}
		else
		{
			min = DEGREE_F_LOW_TEMP;
			max = DEGREE_F_HIGH_TEMP;
			s = "F";
		}
		if ( SetupOption(v, y, min, max, 3, s, ".", "Setup Heater", "On @", "Off @") )
		{
			InternalMemory.HeaterTempOn_write(v);
			InternalMemory.HeaterTempOff_write(y);
		}
		break;
	}
	case TempsMenu_Chiller:
	{
		int v = InternalMemory.ChillerTempOn_read();
		int y = InternalMemory.ChillerTempOff_read();
		int min, max;
		char *s = "0";
		if ( TempSensor.unit )
		{
			min = DEGREE_C_LOW_TEMP;
			max = DEGREE_C_HIGH_TEMP;
			s = "C";
		}
		else
		{
			min = DEGREE_F_LOW_TEMP;
			max = DEGREE_F_HIGH_TEMP;
			s = "F";
		}
		if ( SetupOption(v, y, min, max, 3, s, ".", "Setup Chiller", "On @", "Off @") )
		{
			InternalMemory.ChillerTempOn_write(v);
			InternalMemory.ChillerTempOff_write(y);
		}
		break;
	}
#ifdef OverheatSetup
	case TempsMenu_Overheat:
	{
		int v = InternalMemory.OverheatTemp_read();
		int y = -1;
		int min, max;
		char *s = "0";
		byte d;
		if ( TempSensor.unit )
		{
			min = DEGREE_C_OVERHEAT_LOW_TEMP;
			max = DEGREE_C_OVERHEAT_HIGH_TEMP;
			s = "C";
			d = 3;
		}
		else
		{
			min = DEGREE_F_OVERHEAT_LOW_TEMP;
			max = DEGREE_F_OVERHEAT_HIGH_TEMP;
			s = "F";
			d = 4;
		}
		if ( SetupOption(v, y, min, max, d, s, ".", "Setup Overheat", "", "") )
		{
			InternalMemory.OverheatTemp_write(v);
		}
		break;
	}
#endif  // OverheatSetup
	case TempsMenu_OverheatClr:
	{
		OverheatClear();
		DisplayMenuEntry("Clear Overheat");
		showmenu = false;
		break;
	}
	default:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		// switch to the previous menu
		SetDisplayedMenu(PreviousMenu);
		break;
	}
	}
}

#if defined SetupExtras || defined ATOSetup
void ReefAngelClass::ProcessButtonPressTimeouts()
{
	showmenu = true;
	ClearScreen(DefaultBGColor);
	switch ( SelectedMenuItem )
	{
#ifdef ATOSetup
	case TimeoutsMenu_ATOSet:
	{
#ifdef SingleATOSetup
		int v = InternalMemory.ATOTimeout_read();
		int y = InternalMemory.ATOHighTimeout_read();
		if ( SetupOption(v, y, 0, 255, 3, "s", "", "ATO Timeout", "Low:", "High:") )
		{
			InternalMemory.ATOTimeout_write((uint8_t)v);
			InternalMemory.ATOHighTimeout_write((uint8_t)y);
		}
#else  // SingleATOSetup
		int v = InternalMemory.ATOTimeout_read();
		int y = -1;
		if ( SetupOption(v, y, 0, 255, 3, "s", "", "ATO Timeout", "", "") )
		{
			InternalMemory.ATOTimeout_write((uint8_t)v);
		}
#endif  // SingleATOSetup
		break;
	}
#ifdef SingleATOSetup
	case TimeoutsMenu_ATOHrInterval:
	{
		int v = InternalMemory.ATOHourInterval_read();
		int y = InternalMemory.ATOHighHourInterval_read();
		if ( SetupOption(v, y, 0, 24, 2, "h", "", "ATO Interval", "Low:", "High:") )
		{
			InternalMemory.ATOHourInterval_write((uint8_t)v);
			InternalMemory.ATOHighHourInterval_write((uint8_t)y);
		}
		break;
	}
#endif  // SingleATOSetup
	case TimeoutsMenu_ATOClear:
	{
		ATOClear();
		DisplayMenuEntry("Clear ATO Timeout");
		showmenu = false;
		break;
	}
#endif  // ATOSetup
#ifdef SetupExtras
	case TimeoutsMenu_Feeding:
	{
		int v = InternalMemory.FeedingTimer_read();
		int y = -1;
		if ( SetupOption(v, y, 0, 3600, 4, "s", "", "Feeding Timer", "", "") )
		{
			InternalMemory.FeedingTimer_write(v);
			// update the feeding timer value
			Timer[FEEDING_TIMER].SetInterval(v);
		}
		break;
	}
	case TimeoutsMenu_LCD:
	{
		int v = InternalMemory.LCDTimer_read();
		int y = -1;
		if ( SetupOption(v, y, 0, 3600, 4, "s", "", "Screen Timeout", "", "") )
		{
			InternalMemory.LCDTimer_write(v);
			// update the timer value
			Timer[LCD_TIMER].SetInterval(v);
			Timer[LCD_TIMER].Start();
		}
		break;
	}
#endif  // SetupExtras
	default:
	{
		SelectedMenuItem = DEFAULT_MENU_ITEM;
		// switch to the previous menu
		SetDisplayedMenu(PreviousMenu);
		break;
	}
	}
}
#endif  // if defined SetupExtras || defined ATOSetup

// Setup Menu Screens
bool ReefAngelClass::SetupOption(int &v, int &y, int rangemin, int rangemax, byte maxdigits,
		char* unit, char* subunit, char* title,
		char* prefix1, char* prefix2)
{
	// return true to save value stored in out in memory
	enum choices {
		OPT1,
		OPT2,
		OK,
		CANCEL
	};
	byte sel = OPT1;
	bool bSave = false;
	bool bDone = false;
	bool bRedraw = true;
	bool bDrawButtons = true;
	bool bSingle = (y < 0) ? true : false;
	byte offset = 50;
	ClearScreen(DefaultBGColor);
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, title);
	// prefix for each option
	if ( ! bSingle )
	{
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*4, prefix1);
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*6, prefix2);
	}
	do
	{
#if defined WDT || defined WDT_FORCE
		wdt_reset();
#endif  // defined WDT || defined WDT_FORCE
		if ( bRedraw )
		{
			switch ( sel )
			{
			case OPT1:
			{
				if ( ! bSingle )
					LCD.DrawOption(y, 0, MENU_START_COL+offset, MENU_START_ROW*6, unit, subunit, maxdigits);
				LCD.DrawOption(v, 1, MENU_START_COL+offset, MENU_START_ROW*4, unit, subunit, maxdigits);
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OPT2:
			{
				LCD.DrawOption(v, 0, MENU_START_COL+offset, MENU_START_ROW*4, unit, subunit, maxdigits);
				LCD.DrawOption(y, 1, MENU_START_COL+offset, MENU_START_ROW*6, unit, subunit, maxdigits);
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OK:
			{
				if ( bDrawButtons )
				{
					LCD.DrawOption(v, 0, MENU_START_COL+offset, MENU_START_ROW*4, unit, subunit, maxdigits);
					if ( ! bSingle )
						LCD.DrawOption(y, 0, MENU_START_COL+offset, MENU_START_ROW*6, unit, subunit, maxdigits);
					LCD.DrawOK(true);
					LCD.DrawCancel(false);
				}
				break;
			}
			case CANCEL:
			{
				if ( bDrawButtons )
				{
					LCD.DrawOption(v, 0, MENU_START_COL+offset, MENU_START_ROW*4, unit, subunit, maxdigits);
					if ( ! bSingle )
						LCD.DrawOption(y, 0, MENU_START_COL+offset, MENU_START_ROW*6, unit, subunit, maxdigits);
					LCD.DrawOK(false);
					LCD.DrawCancel(true);
				}
				break;
			}
			}
			bRedraw = false;
			bDrawButtons = false;
		} // if bRedraw
		if ( Joystick.IsUp() )
		{
			bRedraw = true;
			if ( sel == OPT1 )
			{
				v++;
				if ( v > rangemax || v < rangemin)
				{
					v = rangemin;
				}
			}
			else if ( sel == OPT2 )
			{
				y++;
				if ( y > rangemax || y < rangemin )
				{
					y = rangemin;
				}
			}
		}
		if ( Joystick.IsDown() )
		{
			bRedraw = true;
			if ( sel == OPT1 )
			{
				v--;
				if ( v < rangemin || v > rangemax )
				{
					v = rangemax;
				}
			}
			else if ( sel == OPT2 )
			{
				y--;
				if ( y < rangemin || y > rangemax )
				{
					y = rangemax;
				}
			}
		}
		if ( Joystick.IsRight() )
		{
			bRedraw = true;
			bDrawButtons = true;  // only redraw the buttons if we are moving right or left
			// move right, if we are on cancel, wrap around to opt1
			sel++;
			if ( bSingle && sel == OPT2 ) sel++; // advance again if single
			if ( sel > CANCEL )
			{
				sel = OPT1;
			}
		}
		if ( Joystick.IsLeft() )
		{
			bRedraw = true;
			bDrawButtons = true;
			// move left, if we are on opt1, wrap around to cancel
			sel--;
			if ( bSingle && sel == OPT2 ) sel--;
			if ( sel > CANCEL )
			{
				sel = CANCEL;
			}
		}
		if ( Joystick.IsButtonPressed() )
		{
			// only break when button pressed on ok or cancel
			if ( sel == OK )
			{
				bDone = true;
				bSave = true;
			}
			else if ( sel == CANCEL )
			{
				bDone = true;
			}
		}
	} while ( ! bDone );

	// return true saves the value, false ignores the value
	return bSave;
}

void ReefAngelClass::SetupLightsOptionDisplay(bool bMetalHalide)
{
	enum choices {
		OPT1, // On Hour
		OPT2, // On Minute
		OPT3, // Off Hour
		OPT4, // Off Minute
		OK,
		CANCEL
	};
	byte sel = OPT1;
	bool bSave = false;
	bool bDone = false;
	bool bRedraw = true;
	bool bDrawButtons = true;
	uint8_t h1, h2, m1, m2;
	char msg[20];
	byte offset_hr = 45;
	byte offset_min = offset_hr+20;

	if(bMetalHalide)
	{
    strcpy(msg, "Metal Halide Setup");
    h1 = InternalMemory.MHOnHour_read();
    m1 = InternalMemory.MHOnMinute_read();
    h2 = InternalMemory.MHOffHour_read();
    m2 = InternalMemory.MHOffMinute_read();
	}
	else
	{
    strcpy(msg, "Std Lights Setup");
    h1 = InternalMemory.StdLightsOnHour_read();
    m1 = InternalMemory.StdLightsOnMinute_read();
    h2 = InternalMemory.StdLightsOffHour_read();
    m2 = InternalMemory.StdLightsOffMinute_read();
	}
	ClearScreen(DefaultBGColor);
	// header / title
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, msg);
	// prefixes, draw in ':' between options
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*4, "On:");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL+offset_hr+13, MENU_START_ROW*4, ":");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*7, "Off:");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL+offset_hr+13, MENU_START_ROW*7, ":");
	do
	{
#if defined WDT || defined WDT_FORCE
		wdt_reset();
#endif  // defined WDT || defined WDT_FORCE
		if ( bRedraw )
		{
			byte WhichOption=0;
			boolean OKStatus=false;
			boolean CancelStatus=false;
			switch ( sel )
			{
			case OPT1:
			{
				WhichOption=1;
				OKStatus=false;
				CancelStatus=false;
				break;
			}
			case OPT2:
			{
				WhichOption=2;
				OKStatus=false;
				CancelStatus=false;
				break;
			}
			case OPT3:
			{
				WhichOption=3;
				OKStatus=false;
				CancelStatus=false;
				break;
			}
			case OPT4:
			{
				WhichOption=4;
				OKStatus=false;
				CancelStatus=false;
				break;
			}
			case OK:
			{
				WhichOption=0;
				OKStatus=true;
				CancelStatus=false;

				break;
			}
			case CANCEL:
			{
				WhichOption=0;
				OKStatus=false;
				CancelStatus=true;
				break;
			}
			}
			LCD.DrawOption(h1, WhichOption==1, MENU_START_COL+offset_hr, MENU_START_ROW*4, "", "");
			LCD.DrawOption(m1, WhichOption==2, MENU_START_COL+offset_min, MENU_START_ROW*4, "", "");
			LCD.DrawOption(h2, WhichOption==3, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
			LCD.DrawOption(m2, WhichOption==4, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
			if ( bDrawButtons )
			{
				LCD.DrawOK(OKStatus);
				LCD.DrawCancel(CancelStatus);
			}
			bRedraw = false;
			bDrawButtons = false;
		}
		if ( Joystick.IsUp() )
		{
			bRedraw = true;
			if ( sel == OPT1 )
			{
				h1++;
				if ( h1 > 23 )
				{
					h1 = 0;
				}
			}
			else if ( sel == OPT2 )
			{
				m1++;
				if ( m1 > 59 )
				{
					m1 = 0;
				}
			}
			else if ( sel == OPT3 )
			{
				h2++;
				if ( h2 > 23 )
				{
					h2 = 0;
				}
			}
			else if ( sel == OPT4 )
			{
				m2++;
				if ( m2 > 59 )
				{
					m2 = 0;
				}
			}
		}
		if ( Joystick.IsDown() )
		{
			bRedraw = true;
			if ( sel == OPT1 )
			{
				h1--;
				if ( h1 > 23 )
				{
					h1 = 23;
				}
			}
			else if ( sel == OPT2 )
			{
				m1--;
				if ( m1 > 59 )
				{
					m1 = 59;
				}
			}
			else if ( sel == OPT3 )
			{
				h2--;
				if ( h2 > 23 )
				{
					h2 = 23;
				}
			}
			else if ( sel == OPT4 )
			{
				m2--;
				if ( m2 > 59 )
				{
					m2 = 59;
				}
			}
		}
		if ( Joystick.IsRight() )
		{
			bRedraw = true;
			bDrawButtons = true;  // only redraw the buttons if we are moving right or left
			// move right, if we are on cancel, wrap around to opt1
			sel++;
			if ( sel > CANCEL )
			{
				sel = OPT1;
			}
		}
		if ( Joystick.IsLeft() )
		{
			bRedraw = true;
			bDrawButtons = true;
			// move left, if we are on opt1, wrap around to cancel
			sel--;
			if ( sel > CANCEL )
			{
				sel = CANCEL;
			}
		}
		if ( Joystick.IsButtonPressed() )
		{
			// only break when button pressed on ok or cancel
			if ( sel == OK )
			{
				bDone = true;
				bSave = true;
			}
			else if ( sel == CANCEL )
			{
				bDone = true;
			}
		}
	} while ( ! bDone );
	if ( bSave )
	{
		if ( bMetalHalide )
		{
			InternalMemory.MHOnHour_write(h1);
			InternalMemory.MHOnMinute_write(m1);
			InternalMemory.MHOffHour_write(h2);
			InternalMemory.MHOffMinute_write(m2);
		}
		else
		{
			InternalMemory.StdLightsOnHour_write(h1);
			InternalMemory.StdLightsOnMinute_write(m1);
			InternalMemory.StdLightsOffHour_write(h2);
			InternalMemory.StdLightsOffMinute_write(m2);
		}
	}
}
#endif  // SIMPLE_MENU
#endif  // CUSTOM_MENU

void ReefAngelClass::StartSetupCalibrateChoicePH()
{
    ClearScreen(DefaultBGColor);
    DisplayedMenu=PH_CALIBRATE_MENU;
    showmenu=false;
    setup_option=SETUP_CANCEL;
    setup_step=0;
    setup_input_select=true;
    setup_input_render=true;
    setup_screen_refresh=true;
    setup_save=false;
}

void ReefAngelClass::DisplaySetupCalibrateChoicePH()
{
    if(setup_screen_refresh)
    {
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, (char*)PH_SETUP_MENU_LABEL[0]);
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*6, "pH");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*4, (char*)PH_SETUP_MENU_STEP[setup_step]);
        ph_target_range[setup_step]=PH_DEFAULT_RANGE[setup_step];
        if(setup_step==1&&ph_target_range[0]==ph_target_range[setup_step])
        {
            ph_target_range[setup_step]--;
        }
        setup_screen_refresh=!setup_screen_refresh;
    }
    #if defined WDT||defined WDT_FORCE
    wdt_reset();
    #endif//WDT||defined WDT_FORCE
    #if defined wifi||defined ETH_WIZ5100
    ReefAngel.Network.ReceiveData();
    #endif//wifi||defined ETH_WIZ5100
    ph_read_range[setup_step]=0;
    for (int a=0;a<30;a++)
    {
        ph_read_range[setup_step]+=analogRead(PHPin);
    }
    ph_read_range[setup_step]/=30;
    LCD.DrawCalibrate(ph_read_range[setup_step], MENU_START_COL+65, MENU_START_ROW*6);
    if(setup_input_render)
    {
        switch(setup_option)
        {
            case SETUP_PH:
            {
                LCD.DrawOK(false);
                LCD.DrawCancel(false);
                break;
            }
            case SETUP_OK:
            {
                LCD.DrawOK(true);
                LCD.DrawCancel(false);
                break;
            }
            case SETUP_CANCEL:
            {
                LCD.DrawOK(false);
                LCD.DrawCancel(true);
                break;
            }
        }
        LCD.DrawOption(ph_target_range[setup_step], setup_option==SETUP_PH?1:0, MENU_START_COL+18, MENU_START_ROW*6, "", "", 2);
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsUp())
    {
        if(setup_option==SETUP_PH)
        {
            ph_target_range[setup_step]++;
            if((setup_step==1)&&(ph_target_range[LOW]==ph_target_range[setup_step]))
            {
                if((ph_target_range[setup_step]+1)<=PH_MAXIMUM_RANGE[HIGH])
                {
                    ph_target_range[setup_step]++;
                } else {
                    ph_target_range[setup_step]--;
                }
            }
            if(ph_target_range[setup_step]>PH_MAXIMUM_RANGE[HIGH])
            {
                ph_target_range[setup_step]=PH_MAXIMUM_RANGE[HIGH];
            }
            else 
            {
                setup_input_render=true;
            }
        }
    }
    if(Joystick.IsDown())
    {
        if(setup_option==SETUP_PH)
        {
            ph_target_range[setup_step]--;
            if((setup_step==1)&&(ph_target_range[LOW]==ph_target_range[setup_step]))
            {
                if((ph_target_range[setup_step]-1)>=PH_MAXIMUM_RANGE[LOW])
                {
                    ph_target_range[setup_step]--;
                }
                else
                {
                    ph_target_range[setup_step]++;
                }
            }
            if(ph_target_range[setup_step]<PH_MAXIMUM_RANGE[LOW])
            {
                ph_target_range[setup_step]=PH_MAXIMUM_RANGE[LOW];
            }
            else 
            {
                setup_input_render=true;
            }
        }
    }
    if(Joystick.IsLeft())
    {
        setup_input_render=true;
        setup_option--;
        if(setup_option>SETUP_OK)
        {
            setup_option=SETUP_OK;
        }
    }
    if(Joystick.IsRight())
    {
        setup_input_render=true;
        setup_option++;
        if(setup_option>SETUP_OK)
        {
            setup_option=SETUP_PH;
        }
    }
    if(Joystick.IsButtonPressed())
    {
        if(setup_option==SETUP_OK||setup_option==SETUP_PH)
        {
            setup_input_render=true;
            setup_save=true;
            setup_screen_refresh=true;
            setup_option=SETUP_CANCEL;
        }
        else
        {
            setup_save=false;
        }
        setup_step+=1;
    }
    if(((!setup_save)&&(setup_step==1))||(setup_step>1))
    {
        ClearScreen(DefaultBGColor);
        DisplayedMenu=DEFAULT_MENU;
    }
    if((setup_save)&&(setup_step>1))
    {
        PHMin=map(PH_DEFAULT_RANGE[LOW], ph_target_range[LOW], ph_target_range[HIGH], ph_read_range[LOW], ph_read_range[HIGH]);
        PHMax=map(PH_DEFAULT_RANGE[HIGH], ph_target_range[LOW], ph_target_range[HIGH], ph_read_range[LOW], ph_read_range[HIGH]);
        InternalMemory.PHMin_write(PHMin);
        InternalMemory.PHMax_write(PHMax);
    }
}

#ifdef PHEXPANSION
void ReefAngelClass::StartSetupCalibrateChoicePHExp()
{
    ClearScreen(DefaultBGColor);
    DisplayedMenu=PHE_CALIBRATE_MENU;
    showmenu=false;
    setup_option=SETUP_CANCEL;
    setup_step=0;
    setup_input_select=true;
    setup_input_render=true;
    setup_screen_refresh=true;
    setup_save=false;
}

void ReefAngelClass::DisplaySetupCalibrateChoicePHExp()
{
    if(setup_screen_refresh)
    {
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, (char*)PH_SETUP_MENU_LABEL[1]);
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*6, "pH");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*4, (char*)PH_SETUP_MENU_STEP[setup_step]);
        ph_target_range[setup_step]=PH_DEFAULT_RANGE[setup_step];
        if(setup_step==1&&ph_target_range[0]==ph_target_range[setup_step])
        {
            ph_target_range[setup_step]--;
        }
        setup_screen_refresh=!setup_screen_refresh;
    }
    #if defined WDT||defined WDT_FORCE
    wdt_reset();
    #endif//WDT||defined WDT_FORCE
    #if defined wifi||defined ETH_WIZ5100
    ReefAngel.Network.ReceiveData();
    #endif//wifi||defined ETH_WIZ5100
    ph_read_range[setup_step]=0;
    for (int a=0;a<5;a++)
    {
        ph_read_range[setup_step]+=PH.Read();
    }
    ph_read_range[setup_step]/=5;
    LCD.DrawCalibrate(ph_read_range[setup_step], MENU_START_COL+65, MENU_START_ROW*6);
    if(setup_input_render)
    {
        switch(setup_option)
        {
            case SETUP_PH:
            {
                LCD.DrawOK(false);
                LCD.DrawCancel(false);
                break;
            }
            case SETUP_OK:
            {
                LCD.DrawOK(true);
                LCD.DrawCancel(false);
                break;
            }
            case SETUP_CANCEL:
            {
                LCD.DrawOK(false);
                LCD.DrawCancel(true);
                break;
            }
        }
        LCD.DrawOption(ph_target_range[setup_step], setup_option==SETUP_PH?1:0, MENU_START_COL+18, MENU_START_ROW*6, "", "", 2);
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsUp())
    {
        if(setup_option==SETUP_PH)
        {
            ph_target_range[setup_step]++;
            if((setup_step==1)&&(ph_target_range[LOW]==ph_target_range[setup_step]))
            {
                if((ph_target_range[setup_step]+1)<=PH_MAXIMUM_RANGE[HIGH])
                {
                    ph_target_range[setup_step]++;
                } else {
                    ph_target_range[setup_step]--;
                }
            }
            if(ph_target_range[setup_step]>PH_MAXIMUM_RANGE[HIGH])
            {
                ph_target_range[setup_step]=PH_MAXIMUM_RANGE[HIGH];
            }
            else 
            {
                setup_input_render=true;
            }
        }
    }
    if(Joystick.IsDown())
    {
        if(setup_option==SETUP_PH)
        {
            ph_target_range[setup_step]--;
            if((setup_step==1)&&(ph_target_range[LOW]==ph_target_range[setup_step]))
            {
                if((ph_target_range[setup_step]-1)>=PH_MAXIMUM_RANGE[LOW])
                {
                    ph_target_range[setup_step]--;
                }
                else
                {
                    ph_target_range[setup_step]++;
                }
            }
            if(ph_target_range[setup_step]<PH_MAXIMUM_RANGE[LOW])
            {
                ph_target_range[setup_step]=PH_MAXIMUM_RANGE[LOW];
            }
            else 
            {
                setup_input_render=true;
            }
        }
    }
    if(Joystick.IsLeft())
    {
        setup_input_render=true;
        setup_option--;
        if(setup_option>SETUP_OK)
        {
            setup_option=SETUP_OK;
        }
    }
    if(Joystick.IsRight())
    {
        setup_input_render=true;
        setup_option++;
        if(setup_option>SETUP_OK)
        {
            setup_option=SETUP_PH;
        }
    }
    if(Joystick.IsButtonPressed())
    {
        if(setup_option==SETUP_OK||setup_option==SETUP_PH)
        {
            setup_input_render=true;
            setup_save=true;
            setup_screen_refresh=true;
            setup_option=SETUP_CANCEL;
        }
        else
        {
            setup_save=false;
        }
        setup_step+=1;
    }
    if(((!setup_save)&&(setup_step==1))||(setup_step>1))
    {
        ClearScreen(DefaultBGColor);
        DisplayedMenu=DEFAULT_MENU;
    }
    if((setup_save)&&(setup_step>1))
    {
        PHExpMin=map(PH_DEFAULT_RANGE[LOW], ph_target_range[LOW], ph_target_range[HIGH], ph_read_range[LOW], ph_read_range[HIGH]);
        PHExpMax=map(PH_DEFAULT_RANGE[HIGH], ph_target_range[LOW], ph_target_range[HIGH], ph_read_range[LOW], ph_read_range[HIGH]);
        InternalMemory.PHMin_write(PHExpMin);
        InternalMemory.PHMax_write(PHExpMax);
    }
}
#endif  // PHEXPANSION

#ifdef SALINITYEXPANSION
void ReefAngelClass::StartSetupCalibrateSalinity()
{
    ClearScreen(DefaultBGColor);
    DisplayedMenu=SAL_CALIBRATE_MENU;
    showmenu=false;
    setup_input_select=true;
    setup_input_render=true;
    setup_screen_refresh=true;
}

void ReefAngelClass::DisplaySetupCalibrateSalinity()
{
    if(setup_screen_refresh)
    {
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, "Calibrate Salinity");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*5, "35 PPT");
        setup_screen_refresh=!setup_screen_refresh;
    }
    #if defined WDT||defined WDT_FORCE
    wdt_reset();
    #endif//WDT||defined WDT_FORCE
    #if defined wifi||defined ETH_WIZ5100
    ReefAngel.Network.ReceiveData();
    #endif//wifi||defined ETH_WIZ5100
    salinity_read=0;
    for(int a=0; a<15; a++)
    {
        salinity_read+=Salinity.Read();
    }
    salinity_read/=15;
    LCD.DrawCalibrate(salinity_read, MENU_START_COL+65, MENU_START_ROW*5);
    if(setup_input_render)
    {
        LCD.DrawOK(setup_input_select);
        LCD.DrawCancel(!setup_input_select);
        setup_input_render=false;
    }
    if(Joystick.IsUp()||Joystick.IsDown()||Joystick.IsRight()||Joystick.IsLeft())
    {
        setup_input_select=!setup_input_select;
        setup_input_render=true;
    }
    if(Joystick.IsButtonPressed())
    {
        if(setup_input_select)
        {
            InternalMemory.SalMax_write(salinity_read);
            InternalMemory.SalTempComp_write(Params.Temp[TempProbe]);
            SalMax=salinity_read;
        }
        ClearScreen(DefaultBGColor);
        DisplayedMenu=DEFAULT_MENU;
    }
}
#endif//SALINITYEXPANSION

#ifdef ORPEXPANSION
void ReefAngelClass::SetupCalibrateORP()
{
	bool bOKSel = false;
	bool bSave = false;
	bool bDone = false;
	bool bDrawButtons = true;
	unsigned int iO[2] = {0,0};
	unsigned int iCal[2] = {0,470};
	byte offset = 65;
	// draw labels
	ClearScreen(DefaultBGColor);
	DisplayedMenu=ORP_CALIBRATE_MENU;
	for (int b=0;b<2;b++)
	{
		if (b==1 && !bSave) break;
		bOKSel=false;
		bSave=false;
		bDone = false;
		bDrawButtons = true;
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, "Calibrate ORP");
		char text[10];
		itoa(iCal[b],text,10);
		strcat(text , " mV  ");
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*5, text);
		do
		{
#if defined WDT || defined WDT_FORCE
			wdt_reset();
#endif  // defined WDT || defined WDT_FORCE
#if defined wifi || defined ETH_WIZ5100
			ReefAngel.Network.ReceiveData();
#endif  // wifi
			iO[b]=0;
			for (int a=0;a<15;a++)
			{
				iO[b] += ORP.Read();
			}
			iO[b]/=15;
			LCD.DrawCalibrate(iO[b], MENU_START_COL + offset, MENU_START_ROW*5);
			if (  bDrawButtons )
			{
				if ( bOKSel )
				{
					LCD.DrawOK(true);
					LCD.DrawCancel(false);
				}
				else
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(true);
				}
				bDrawButtons = false;
			}
			if ( Joystick.IsUp() || Joystick.IsDown() || Joystick.IsRight() || Joystick.IsLeft() )
			{
				// toggle the selection
				bOKSel = !bOKSel;
				bDrawButtons = true;
			}
			if ( Joystick.IsButtonPressed() )
			{
				bDone = true;
				if ( bOKSel )
				{
					bSave = true;
				}
			}
		} while ( ! bDone );
	}
	ClearScreen(DefaultBGColor);
	DisplayedMenu=DEFAULT_MENU;
	redrawmenu = true;
	showmenu = false;
	if ( bSave )
	{
		// save ORPMin & ORPMax to memory
		InternalMemory.ORPMin_write(iO[0]);
		ORPMin = iO[0];
		InternalMemory.ORPMax_write(iO[1]);
		ORPMax = iO[1];
	}
}
#endif  // ORPEXPANSION

#if defined WATERLEVELEXPANSION || defined MULTIWATERLEVELEXPANSION
void ReefAngelClass::SetupCalibrateWaterLevel()
{
	enum choices {
		WLCHANNEL,
		CANCEL,
		OK
	};
	byte sel = CANCEL;

	bool bOKSel = false;
	bool bSave = false;
	bool bDone = false;
	bool bRedraw = true;
	bool bDrawButtons = true;
	unsigned int iO[2] = {0,0};
	unsigned int iCal[2] = {0,100};
	byte offset = 65;
#if defined MULTIWATERLEVELEXPANSION && !defined WATERLEVELEXPANSION
  int wl_channel=1;
#else
  int wl_channel=0;
#endif //  defined MULTIWATERLEVELEXPANSION && !defined WATERLEVELEXPANSION

	// draw labels
	ClearScreen(DefaultBGColor);
	DisplayedMenu=WL_CALIBRATE_MENU;
	for (int b=0;b<2;b++)
	{
		if (b==1 && !bSave) break;
		bOKSel=false;
		bSave=false;
		bDone = false;
		bDrawButtons = true;
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, "Calibrate Water Level");
		char text[10];
		itoa(iCal[b],text,10);
		strcat(text , " %  ");
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*5, text);
		LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*7, "Channel:");
		do
		{
#if defined WDT || defined WDT_FORCE
			wdt_reset();
#endif  // defined WDT || defined WDT_FORCE
#if defined wifi || defined ETH_WIZ5100
			ReefAngel.Network.ReceiveData();
#endif  // wifi
			iO[b]=0;
			for (int a=0;a<15;a++)
			{
				iO[b] += WaterLevel.Read(wl_channel);
			}
			iO[b]/=15;
			LCD.DrawCalibrate(iO[b], MENU_START_COL + offset, MENU_START_ROW*5);

			if (  bRedraw )
			{
				switch ( sel )
				{
				case WLCHANNEL:
				{
					LCD.DrawOption(wl_channel, 1, MENU_START_COL + offset, MENU_START_ROW*7, "", "", 2);
					if ( bDrawButtons )
					{
						LCD.DrawOK(false);
						LCD.DrawCancel(false);
					}
					break;
				}
				case OK:
				{
					if ( bDrawButtons )
					{
						LCD.DrawOption(wl_channel, 0, MENU_START_COL + offset, MENU_START_ROW*7, "", "", 2);
						LCD.DrawOK(true);
						LCD.DrawCancel(false);
					}
					break;
				}
				case CANCEL:
				{
					if ( bDrawButtons )
					{
						LCD.DrawOption(wl_channel, 0, MENU_START_COL + offset, MENU_START_ROW*7, "", "", 2);
						LCD.DrawOK(false);
						LCD.DrawCancel(true);
					}
					break;
				}
				}
				bRedraw = false;
				bDrawButtons = false;
			}
			if ( Joystick.IsUp() )
			{
				if (sel == WLCHANNEL)
				{
					wl_channel++;
					if ( wl_channel == WATERLEVEL_CHANNELS )
					{
						wl_channel = WATERLEVEL_CHANNELS-1;
					}
					else
					{
						bRedraw = true;
					}
				}
			}
			if ( Joystick.IsDown() )
			{
				if (sel == WLCHANNEL)
				{
					wl_channel--;
#if defined MULTIWATERLEVELEXPANSION && !defined WATERLEVELEXPANSION
          if ( wl_channel < 1 )
          {
            wl_channel = 1;
#else
					if ( wl_channel < 0 )
					{
						wl_channel = 0;
#endif //  defined MULTIWATERLEVELEXPANSION && !defined WATERLEVELEXPANSION
					}
					else
					{
						bRedraw = true;
					}
				}
			}

			if ( Joystick.IsLeft() )
			{
				bRedraw = true;
				bDrawButtons = true;
				sel--;
				if ( sel > OK )
				{
					sel = OK;
				}
				if (b == 1 && sel == WLCHANNEL)
					sel = OK;
			}

			if ( Joystick.IsRight() )
			{
				bRedraw = true;
				bDrawButtons = true;
				sel++;
				if ( sel > OK )
				{
					if (b==0)
						sel = WLCHANNEL;
					else
						sel = CANCEL;
				}
			}

			if ( Joystick.IsButtonPressed() )
			{
				if ( sel == OK || sel == WLCHANNEL)
				{
					bDone = true;
					bSave = true;
				}
				else if ( sel == CANCEL )
				{
					bDone = true;
				}
			}
		} while ( ! bDone );
	}
	ClearScreen(DefaultBGColor);
	DisplayedMenu=DEFAULT_MENU;
	redrawmenu = true;
	showmenu = false;
	if ( bSave )
	{
		// save WaterLevelMin & WaterLevelMax to memory
		switch ( wl_channel )
		{
		case 0:
			InternalMemory.WaterLevelMin_write(iO[0]);
			InternalMemory.WaterLevelMax_write(iO[1]);
			break;
		case 1:
			InternalMemory.WaterLevel1Min_write(iO[0]);
			InternalMemory.WaterLevel1Max_write(iO[1]);
			break;
		case 2:
			InternalMemory.WaterLevel2Min_write(iO[0]);
			InternalMemory.WaterLevel2Max_write(iO[1]);
			break;
		case 3:
			InternalMemory.WaterLevel3Min_write(iO[0]);
			InternalMemory.WaterLevel3Max_write(iO[1]);
			break;
		case 4:
			InternalMemory.WaterLevel4Min_write(iO[0]);
			InternalMemory.WaterLevel4Max_write(iO[1]);
			break;
		}
	}
}
#endif  // WATERLEVELEXPANSION || MULTIWATERLEVELEXPANSION

#define AM "AM"
#define PM "PM"

#if defined DateTimeSetup && !defined DATETIME24
void ReefAngelClass::StartSetupDateTime()
{
    ClearScreen(DefaultBGColor);
    DisplayedMenu=DATE_TIME_MENU;
    showmenu=false;
    setup_option=SETUP_DATETIME_MONTH;
    setup_input_render=true;
    setup_screen_refresh=true;
    currentDateTime.year=year();
    currentDateTime.month=month();
    currentDateTime.day=day();
    byte hour_temp=hour();
    if(hour_temp>12){
        currentDateTime.hour=hour_temp-12;
        currentDateTime.period=PM;
    }else{
        currentDateTime.hour=hour_temp;
        currentDateTime.period=AM;
    }
    currentDateTime.minute=minute();
    lastDayOfEachMonth[0]=31;
    lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
    lastDayOfEachMonth[2]=31;
    lastDayOfEachMonth[3]=30;
    lastDayOfEachMonth[4]=31;
    lastDayOfEachMonth[5]=30;
    lastDayOfEachMonth[6]=31;
    lastDayOfEachMonth[7]=31;
    lastDayOfEachMonth[8]=30;
    lastDayOfEachMonth[9]=31;
    lastDayOfEachMonth[10]=30;
    lastDayOfEachMonth[11]=31;
}

void ReefAngelClass::DisplaySetupDateTime()
{
    if(setup_screen_refresh)
    {
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, "Set Date & Time");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 10, 45,"Date:");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 10, 75,"Time:");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 62, 45, "/");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 82, 45, "/");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 62, 75, ":");
        setup_screen_refresh=!setup_screen_refresh;
        
    }
    #if defined WDT||defined WDT_FORCE
    wdt_reset();
    #endif//WDT||defined WDT_FORCE
    #if defined wifi||defined ETH_WIZ5100
    ReefAngel.Network.ReceiveData();
    #endif//wifi||defined ETH_WIZ5100
    if(setup_input_render)
    {
        LCD.DrawOption(currentDateTime.month, setup_option==SETUP_DATETIME_MONTH?1:0, 49, 45, "", "", 2);
        LCD.DrawOption(currentDateTime.day, setup_option==SETUP_DATETIME_DAY?1:0, 69, 45, "", "", 2);
        LCD.DrawOption(currentDateTime.year-2000, setup_option==SETUP_DATETIME_YEAR?1:0, 89, 45, "", "", 2);
        LCD.DrawOption(currentDateTime.hour, setup_option==SETUP_DATETIME_HOUR?1:0, 49, 75, "", "", 2);
        LCD.DrawOption(currentDateTime.minute, setup_option==SETUP_DATETIME_MINUTE?1:0, 69, 75, "", "", 2);
        LCD.DrawSelect(currentDateTime.period, setup_option==SETUP_DATETIME_PERIOD?1:0, 89, 75, 2);
        LCD.DrawOK(setup_option==SETUP_DATETIME_OK?1:0);
        LCD.DrawCancel(setup_option==SETUP_DATETIME_CANCEL?1:0);
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsUp())
    {
        switch(setup_option)
        {
            case SETUP_DATETIME_MONTH:
            {
                currentDateTime.month++;
                if(currentDateTime.month>12)
                {
                    currentDateTime.month=1;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_DAY:
            {
                currentDateTime.day++;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1])
                {
                    currentDateTime.day=1;
                }
                break;
            }
            case SETUP_DATETIME_YEAR:
            {
                currentDateTime.year++;
                if(currentDateTime.year>2099)
                {
                    currentDateTime.year=2000;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_HOUR:
            {
                currentDateTime.hour++;
                if(currentDateTime.hour>12)
                {
                    currentDateTime.hour=0;
                }
                break;
            }
            case SETUP_DATETIME_MINUTE:
            {
                currentDateTime.minute++;
                if(currentDateTime.minute>59)
                {
                    currentDateTime.minute=0;
                }
                break;
            }
            case SETUP_DATETIME_PERIOD:
            {
                if(currentDateTime.period==AM){
                    currentDateTime.period=PM;
                }else{
                    currentDateTime.period=AM;
                }
                break;
            }
        }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsDown())
    {
        switch (setup_option)
        {
            case SETUP_DATETIME_MONTH:
            {
                currentDateTime.month--;
                if(currentDateTime.month<1||currentDateTime.month>12)
                {
                    currentDateTime.month=12;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_DAY:
            {
                currentDateTime.day--;
                if(currentDateTime.day<1||currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1])
                {
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_YEAR:
            {
                currentDateTime.year--;
                if(currentDateTime.year<2000||currentDateTime.year>2049)
                {
                    currentDateTime.year=2099;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_HOUR:
            {
                currentDateTime.hour--;
                if(currentDateTime.hour>12)
                {
                    currentDateTime.hour=12;
                }
                break;
            }
            case SETUP_DATETIME_MINUTE:
            {
                currentDateTime.minute--;
                if(currentDateTime.minute>59)
                {
                    currentDateTime.minute=59;
                }
                break;
            }
            case SETUP_DATETIME_PERIOD:
            {
                if(currentDateTime.period==AM){
                    currentDateTime.period=PM;
                }else{
                    currentDateTime.period=AM;
                }
                break;
            }
        }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsLeft())
    {
        setup_option--;
        if (setup_option>SETUP_DATETIME_OK)
        {
            setup_option=SETUP_DATETIME_OK;
        }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsRight())
    {
        setup_option++;
         if (setup_option>SETUP_DATETIME_OK)
        {
             setup_option=SETUP_DATETIME_MONTH;
         }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsButtonPressed())
    {
        if(setup_option==SETUP_DATETIME_OK||setup_option==SETUP_DATETIME_CANCEL)
        {
            ClearScreen(DefaultBGColor);
            DisplayedMenu=DEFAULT_MENU;
            if(setup_option==SETUP_DATETIME_OK)
            {
                setTime(currentDateTime.period==PM? currentDateTime.hour+12: currentDateTime.hour, currentDateTime.minute, 0, currentDateTime.day, currentDateTime.month, currentDateTime.year);
                RTC.set(now());
            }
        }
    }
}
#endif  // DateTimeSetup

#if defined DateTimeSetup && defined DATETIME24
void ReefAngelClass::StartSetupDateTime24()
{
    ClearScreen(DefaultBGColor);
    DisplayedMenu=DATE_TIME_MENU;
    showmenu=false;
    setup_option=SETUP_DATETIME_MONTH;
    setup_input_render=true;
    setup_screen_refresh=true;
    currentDateTime.year=year();
    currentDateTime.month=month();
    currentDateTime.day=day();
    currentDateTime.hour=hour();
    currentDateTime.minute=minute();
    lastDayOfEachMonth[0]=31;
    lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
    lastDayOfEachMonth[2]=31;
    lastDayOfEachMonth[3]=30;
    lastDayOfEachMonth[4]=31;
    lastDayOfEachMonth[5]=30;
    lastDayOfEachMonth[6]=31;
    lastDayOfEachMonth[7]=31;
    lastDayOfEachMonth[8]=30;
    lastDayOfEachMonth[9]=31;
    lastDayOfEachMonth[10]=30;
    lastDayOfEachMonth[11]=31;
}

void ReefAngelClass::DisplaySetupDateTime24()
{
    if(setup_screen_refresh)
    {
        LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, "Set Date & Time(24h)");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 10, 45,"Date:");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 10, 75,"Time:");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 62, 45, "/");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 82, 45, "/");
        LCD.DrawText(DefaultFGColor, DefaultBGColor, 62, 75, ":");
        setup_screen_refresh=!setup_screen_refresh;
        
    }
    #if defined WDT||defined WDT_FORCE
    wdt_reset();
    #endif//WDT||defined WDT_FORCE
    #if defined wifi||defined ETH_WIZ5100
    ReefAngel.Network.ReceiveData();
    #endif//wifi||defined ETH_WIZ5100
    if(setup_input_render)
    {
        LCD.DrawOption(currentDateTime.day, setup_option==SETUP_DATETIME_MONTH?1:0, 49, 45, "", "", 2);
        LCD.DrawOption(currentDateTime.month, setup_option==SETUP_DATETIME_DAY?1:0, 69, 45, "", "", 2);
        LCD.DrawOption(currentDateTime.year-2000, setup_option==SETUP_DATETIME_YEAR?1:0, 89, 45, "", "", 2);
        LCD.DrawOption(currentDateTime.hour, setup_option==SETUP_DATETIME_HOUR?1:0, 49, 75, "", "", 2);
        LCD.DrawOption(currentDateTime.minute, setup_option==SETUP_DATETIME_MINUTE?1:0, 69, 75, "", "", 2);
        LCD.DrawOK(setup_option==SETUP_DATETIME_OK?1:0);
        LCD.DrawCancel(setup_option==SETUP_DATETIME_CANCEL?1:0);
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsUp())
    {
        switch(setup_option)
        {
            case SETUP_DATETIME_MONTH:
            {
                currentDateTime.month++;
                if(currentDateTime.month>12)
                {
                    currentDateTime.month=1;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_DAY:
            {
                currentDateTime.day++;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1])
                {
                    currentDateTime.day=1;
                }
                break;
            }
            case SETUP_DATETIME_YEAR:
            {
                currentDateTime.year++;
                if(currentDateTime.year>2099)
                {
                    currentDateTime.year=2000;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_HOUR:
            {
                currentDateTime.hour++;
                if(currentDateTime.hour>24)
                {
                    currentDateTime.hour=0;
                }
                break;
            }
            case SETUP_DATETIME_MINUTE:
            {
                currentDateTime.minute++;
                if(currentDateTime.minute>59)
                {
                    currentDateTime.minute=0;
                }
                break;
            }
        }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsDown())
    {
        switch (setup_option)
        {
            case SETUP_DATETIME_MONTH:
            {
                currentDateTime.month--;
                if(currentDateTime.month<1||currentDateTime.month>12)
                {
                    currentDateTime.month=12;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_DAY:
            {
                currentDateTime.day--;
                if(currentDateTime.day<1||currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1])
                {
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_YEAR:
            {
                currentDateTime.year--;
                if(currentDateTime.year<2000||currentDateTime.year>2049)
                {
                    currentDateTime.year=2099;
                }
                lastDayOfEachMonth[1]=IsLeapYear(currentDateTime.year)?29:28;
                if(currentDateTime.day>lastDayOfEachMonth[currentDateTime.month-1]){
                    currentDateTime.day=lastDayOfEachMonth[currentDateTime.month-1];
                }
                break;
            }
            case SETUP_DATETIME_HOUR:
            {
                currentDateTime.hour--;
                if(currentDateTime.hour>24)
                {
                    currentDateTime.hour=24;
                }
                break;
            }
            case SETUP_DATETIME_MINUTE:
            {
                currentDateTime.minute--;
                if(currentDateTime.minute>59)
                {
                    currentDateTime.minute=59;
                }
                break;
            }
        }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsLeft())
    {
        setup_option--;
        if (setup_option>SETUP_DATETIME_OK)
        {
            setup_option=SETUP_DATETIME_OK;
        }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsRight())
    {
        setup_option++;
         if (setup_option>SETUP_DATETIME_OK)
        {
             setup_option=SETUP_DATETIME_MONTH;
         }
        setup_input_render=!setup_input_render;
    }
    if(Joystick.IsButtonPressed())
    {
        if(setup_option==SETUP_DATETIME_OK||setup_option==SETUP_DATETIME_CANCEL)
        {
            ClearScreen(DefaultBGColor);
            DisplayedMenu=DEFAULT_MENU;
            if(setup_option==SETUP_DATETIME_OK)
            {
                setTime(currentDateTime.hour, currentDateTime.minute, 0, currentDateTime.day, currentDateTime.month, currentDateTime.year);
                RTC.set(now());
            }
        }
    }
}
#endif  // DATETIME24

#if !defined SIMPLE_MENU && !defined CUSTOM_MENU
#ifdef DosingPumpSetup
void ReefAngelClass::SetupDosingPump()
{
	enum choices {
		OPT1, // DP1 On Hour
		OPT2, // DP1 On Minute
		OPT3, // DP1 Run Time
		OPT4, // DP2 On Hour
		OPT5, // DP2 On Minute
		OPT6, // DP2 Run Time
		OK,
		CANCEL
	};
	byte sel = OPT1;
	bool bSave = false;
	bool bDone = false;
	bool bRedraw = true;
	bool bDrawButtons = true;
	uint8_t h1, h2, m1, m2, r1, r2;
	byte offset_hr = 45;
	byte offset_min = offset_hr+20;
	h1 = InternalMemory.DP1OnHour_read();
	m1 = InternalMemory.DP1OnMinute_read();
	r1 = InternalMemory.DP1Timer_read();
	h2 = InternalMemory.DP2OnHour_read();
	m2 = InternalMemory.DP2OnMinute_read();
	r2 = InternalMemory.DP2Timer_read();
	ClearScreen(DefaultBGColor);
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW, "DP Setup");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*3, "DP1 On:");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL+offset_hr+13, MENU_START_ROW*3, ":");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*5, "Run Time:");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*7, "DP2 On:");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL+offset_hr+13, MENU_START_ROW*7, ":");
	LCD.DrawText(DefaultFGColor, DefaultBGColor, MENU_START_COL, MENU_START_ROW*9, "Run Time:");
	do
	{
#if defined WDT || defined WDT_FORCE
		wdt_reset();
#endif  // defined WDT || defined WDT_FORCE
		if ( bRedraw )
		{
			switch ( sel )
			{
			case OPT1:
			{
				LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
				LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
				LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
				LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
				LCD.DrawOption(h1, 1, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
				LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OPT2:
			{
				LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
				LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
				LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
				LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
				LCD.DrawOption(m1, 1, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
				LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OPT3:
			{
				LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
				LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
				LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
				LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
				LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
				LCD.DrawOption(r1, 1, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OPT4:
			{
				LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
				LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
				LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
				LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
				LCD.DrawOption(h2, 1, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
				LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OPT5:
			{
				LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
				LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
				LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
				LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
				LCD.DrawOption(m2, 1, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
				LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OPT6:
			{
				LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
				LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
				LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
				LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
				LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
				LCD.DrawOption(r2, 1, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
				if ( bDrawButtons )
				{
					LCD.DrawOK(false);
					LCD.DrawCancel(false);
				}
				break;
			}
			case OK:
			{
				if ( bDrawButtons )
				{
					LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
					LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
					LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
					LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
					LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
					LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
					LCD.DrawOK(true);
					LCD.DrawCancel(false);
				}
				break;
			}
			case CANCEL:
			{
				if ( bDrawButtons )
				{
					LCD.DrawOption(m1, 0, MENU_START_COL+offset_min, MENU_START_ROW*3, "", "");
					LCD.DrawOption(h1, 0, MENU_START_COL+offset_hr, MENU_START_ROW*3, "", "");
					LCD.DrawOption(r1, 0, MENU_START_COL+offset_min, MENU_START_ROW*5, "", "", 3);
					LCD.DrawOption(m2, 0, MENU_START_COL+offset_min, MENU_START_ROW*7, "", "");
					LCD.DrawOption(h2, 0, MENU_START_COL+offset_hr, MENU_START_ROW*7, "", "");
					LCD.DrawOption(r2, 0, MENU_START_COL+offset_min, MENU_START_ROW*9, "", "", 3);
					LCD.DrawOK(false);
					LCD.DrawCancel(true);
				}
				break;
			}
			}
			bRedraw = false;
			bDrawButtons = false;
		}
		if ( Joystick.IsUp() )
		{
			bRedraw = true;
			if ( sel == OPT1 )
			{
				h1++;
				if ( h1 > 23 )
				{
					h1 = 0;
				}
			}
			else if ( sel == OPT2 )
			{
				m1++;
				if ( m1 > 59 )
				{
					m1 = 0;
				}
			}
			else if ( sel == OPT3 )
			{
				r1++;
			}
			else if ( sel == OPT4 )
			{
				h2++;
				if ( h2 > 23 )
				{
					h2 = 0;
				}
			}
			else if ( sel == OPT5 )
			{
				m2++;
				if ( m2 > 59 )
				{
					m2 = 0;
				}
			}
			else if ( sel == OPT6 )
			{
				r2++;
			}
		}
		if ( Joystick.IsDown() )
		{
			bRedraw = true;
			if ( sel == OPT1 )
			{
				h1--;
				if ( h1 > 23 )
				{
					h1 = 23;
				}
			}
			else if ( sel == OPT2 )
			{
				m1--;
				if ( m1 > 59 )
				{
					m1 = 59;
				}
			}
			else if ( sel == OPT3 )
			{
				r1--;
			}
			else if ( sel == OPT4 )
			{
				h2--;
				if ( h2 > 23 )
				{
					h2 = 23;
				}
			}
			else if ( sel == OPT5 )
			{
				m2--;
				if ( m2 > 59 )
				{
					m2 = 59;
				}
			}
			else if ( sel == OPT6 )
			{
				r2--;
			}
		}
		if ( Joystick.IsRight() )
		{
			bRedraw = true;
			bDrawButtons = true;  // only redraw the buttons if we are moving right or left
			// move right, if we are on cancel, wrap around to opt1
			sel++;
			if ( sel > CANCEL )
			{
				sel = OPT1;
			}
		}
		if ( Joystick.IsLeft() )
		{
			bRedraw = true;
			bDrawButtons = true;
			// move left, if we are on opt1, wrap around to cancel
			sel--;
			if ( sel > CANCEL )
			{
				sel = CANCEL;
			}
		}
		if ( Joystick.IsButtonPressed() )
		{
			// only break when button pressed on ok or cancel
			if ( sel == OK )
			{
				bDone = true;
				bSave = true;
			}
			else if ( sel == CANCEL )
			{
				bDone = true;
			}
		}
	} while ( ! bDone );
	if ( bSave )
	{
		InternalMemory.DP1OnHour_write(h1);
		InternalMemory.DP1OnMinute_write(m1);
		InternalMemory.DP1Timer_write(r1);
		InternalMemory.DP2OnHour_write(h2);
		InternalMemory.DP2OnMinute_write(m2);
		InternalMemory.DP2Timer_write(r2);
	}
}
#endif  // DosingPumpSetup
#endif  // !defined SIMPLE_MENU && !defined CUSTOM_MENU

void ReefAngelClass::CheckOffset(byte &x, byte &y)
{
	x+=1;
	if (x==3)
	{
		x=0;
		y+=26;
	}
}
